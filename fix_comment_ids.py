#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è comment_id –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

from youtube_comment_downloader import YoutubeCommentDownloader
from models import Video, Comment, get_db_session
from urllib.parse import urlparse, parse_qs

def extract_video_id(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç video_id –∏–∑ YouTube URL"""
    try:
        parsed_url = urlparse(url)
        if parsed_url.hostname in ['www.youtube.com', 'youtube.com']:
            return parse_qs(parsed_url.query)['v'][0]
        elif parsed_url.hostname == 'youtu.be':
            return parsed_url.path[1:]
        return None
    except:
        return None

def fix_comment_ids():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç comment_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é comment_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    
    session = get_db_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    videos = session.query(Video).all()
    
    for video in videos:
        print(f"\nüìπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ ID {video.id}: {video.youtube_url}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ URL
        youtube_video_id = extract_video_id(video.youtube_url)
        if not youtube_video_id:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id –∏–∑ URL: {video.youtube_url}")
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ comment_id
        db_comments = session.query(Comment).filter_by(
            video_id=video.id,
            comment_id=None
        ).all()
        
        if not db_comments:
            print(f"‚úÖ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∂–µ –∏–º–µ—é—Ç comment_id")
            continue
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(db_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–µ–∑ comment_id")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å YouTube
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å YouTube...")
            downloader = YoutubeCommentDownloader()
            fresh_comments = list(downloader.get_comments(youtube_video_id))
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(fresh_comments)} —Å–≤–µ–∂–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∞–≤—Ç–æ—Ä—É
            fresh_comments_map = {}
            for comment in fresh_comments:
                key = (comment.get('author', ''), comment.get('text', ''))
                fresh_comments_map[key] = comment.get('cid')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º comment_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            updated_count = 0
            for db_comment in db_comments:
                key = (db_comment.author, db_comment.text)
                if key in fresh_comments_map:
                    new_comment_id = fresh_comments_map[key]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π comment_id
                    existing = session.query(Comment).filter_by(comment_id=new_comment_id).first()
                    if existing and existing.id != db_comment.id:
                        print(f"‚ö†Ô∏è Comment ID {new_comment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                        continue
                    
                    db_comment.comment_id = new_comment_id
                    updated_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ {video.id}: {e}")
            session.rollback()
    
    session.close()
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    fix_comment_ids() 