import requests
import json
import time
import random
from typing import List, Dict, Optional
from sqlalchemy.orm import Session
from models import Video, Comment, get_db_session

class CommentRanker:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, llm_service_url: str = "http://summarizer-llm:8000", use_fallback: bool = True):
        self.llm_service_url = llm_service_url
        self.batch_size = 5  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.use_fallback = use_fallback  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö LLM
        self.timeout = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
        self.max_retries = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
    def rank_comments_for_video(self, video_id: int) -> bool:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        
        Args:
            video_id: ID –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        session = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏ –µ–≥–æ summary
            video = session.query(Video).filter_by(id=video_id).first()
            if not video:
                print(f"‚ùå –í–∏–¥–µ–æ —Å ID {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            if not video.summary:
                print(f"‚ùå –£ –≤–∏–¥–µ–æ {video_id} –Ω–µ—Ç summary –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ —Ä–∞–Ω–≥–∞
            comments = session.query(Comment).filter_by(
                video_id=video_id, 
                comment_rank=None
            ).all()
            
            if not comments:
                print(f"‚úÖ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {video_id} —É–∂–µ –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã")
                return True
                
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
            llm_available = self._check_llm_availability()
            if not llm_available and self.use_fallback:
                print("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            elif not llm_available:
                print("‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ fallback –æ—Ç–∫–ª—é—á–µ–Ω")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–∞—Ç—á–∞–º–∏
            successful_ranks = 0
            for i in range(0, len(comments), self.batch_size):
                batch = comments[i:i + self.batch_size]
                batch_success = self._process_batch(batch, video.summary, session, llm_available)
                successful_ranks += batch_success
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(1)
                
            session.commit()
            print(f"‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ: {successful_ranks}/{len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            session.rollback()
            return False
        finally:
            session.close()
    
    def _check_llm_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            response = requests.get(f"{self.llm_service_url}/health", timeout=5)
            return response.status_code == 200
        except:
            try:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                response = requests.post(
                    f"{self.llm_service_url}/summarize",
                    json={"text": "test"},
                    timeout=5
                )
                return True
            except:
                return False
    
    def _process_batch(self, comments: List[Comment], video_summary: str, session: Session, llm_available: bool) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        successful_ranks = 0
        for comment in comments:
            try:
                if llm_available:
                    rank = self._rank_single_comment_llm(comment.text, video_summary)
                else:
                    rank = self._rank_single_comment_fallback(comment.text, video_summary)
                    
                if rank is not None:
                    comment.comment_rank = rank
                    successful_ranks += 1
                    method = "LLM" if llm_available else "—ç–≤—Ä–∏—Å—Ç–∏–∫–∞"
                    print(f"üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}: —Ä–∞–Ω–≥ {rank:.3f} ({method})")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID {comment.id}: {e}")
        
        return successful_ranks
    
    def _rank_single_comment_llm(self, comment_text: str, video_summary: str) -> Optional[float]:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é LLM
        
        Args:
            comment_text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            video_summary: –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            
        Returns:
            float: –†–∞–Ω–≥ –æ—Ç 0.0 –¥–æ 1.0 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        prompt = self._create_ranking_prompt(comment_text, video_summary)
        
        for attempt in range(self.max_retries):
            try:
                response = requests.post(
                    f"{self.llm_service_url}/summarize",
                    json={"text": prompt},
                    timeout=self.timeout
                )
                
                if response.status_code == 200:
                    result = response.json()
                    content = result.get("summary", "").strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    rank = self._extract_rank_from_response(content)
                    if rank is not None:
                        return rank
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ LLM —Å–µ—Ä–≤–∏—Å–∞: {response.status_code}")
                    
            except requests.exceptions.Timeout:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç LLM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries})")
                if attempt < self.max_retries - 1:
                    time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LLM: {e}")
                break
        
        # –ï—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if self.use_fallback:
            return self._rank_single_comment_fallback(comment_text, video_summary)
        
        return None
    
    def _rank_single_comment_fallback(self, comment_text: str, video_summary: str) -> float:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        """
        # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        rank = 0.5  # –±–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥
        
        # –î–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
        if len(comment_text) > 100:
            rank += 0.2
        elif len(comment_text) < 20:
            rank -= 0.2
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏
        if '?' in comment_text:
            rank += 0.1
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ —Å —ç–º–æ–¥–∑–∏ –º–µ–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
        if len(comment_text.strip()) < 10 and any(ord(char) > 127 for char in comment_text):
            rank -= 0.3
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã
        keywords = ['—Ä–µ—Ü–µ–ø—Ç', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–≤–∫—É—Å', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–≤—Ä–µ–º—è', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '—á—Ç–æ']
        for keyword in keywords:
            if keyword.lower() in comment_text.lower():
                rank += 0.15
                break
                
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        rank += random.uniform(-0.1, 0.1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        return max(0.0, min(1.0, rank))
    
    def _create_ranking_prompt(self, comment_text: str, video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        return f"""–û—Ü–µ–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0.0 –¥–æ 1.0.

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_summary}

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
- 1.0: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å, –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∏–ª–∏ —É—Ç–æ—á–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ
- 0.7-0.9: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- 0.4-0.6: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–∞—Å—Ç–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º–æ–π –≤–∏–¥–µ–æ
- 0.1-0.3: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
- 0.0: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∏–¥–µ–æ (—Å–ø–∞–º, –æ—Ñ—Ñ—Ç–æ–ø, —ç–º–æ—Ü–∏–∏ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è)

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –æ—Ç 0.0 –¥–æ 1.0: """
    
    def _extract_rank_from_response(self, response: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0 –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –æ—Ç 0.0 –¥–æ 1.0
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, response)
            
            if matches:
                rank = float(matches[0])
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–Ω–≥ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                return max(0.0, min(1.0, rank))
            
            return None
            
        except (ValueError, IndexError):
            return None
    
    def get_ranked_comments(self, video_id: int, min_rank: float = 0.0) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
        
        Args:
            video_id: ID –≤–∏–¥–µ–æ
            min_rank: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ä–∞–Ω–≥–∞–º–∏
        """
        session = get_db_session()
        try:
            comments = session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None),
                Comment.comment_rank >= min_rank
            ).order_by(Comment.comment_rank.desc()).all()
            
            result = []
            for comment in comments:
                result.append({
                    'id': comment.id,
                    'author': comment.author,
                    'text': comment.text,
                    'likes': comment.likes,
                    'rank': comment.comment_rank,
                    'published_at': comment.published_at.isoformat() if comment.published_at else None
                })
            
            return result
            
        finally:
            session.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python comment_ranker.py <video_id> [--no-fallback]")
        return
    
    try:
        video_id = int(sys.argv[1])
        use_fallback = "--no-fallback" not in sys.argv
        
        ranker = CommentRanker(use_fallback=use_fallback)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ ID: {video_id}")
        if use_fallback:
            print("üîÑ –†–µ–∂–∏–º: LLM —Å fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
        else:
            print("üîÑ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ LLM")
            
        success = ranker.rank_comments_for_video(video_id)
        
        if success:
            print("\nüìä –¢–æ–ø-10 –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
            ranked_comments = ranker.get_ranked_comments(video_id, min_rank=0.5)
            
            for i, comment in enumerate(ranked_comments[:10], 1):
                print(f"\n{i}. –†–∞–Ω–≥: {comment['rank']:.3f}")
                print(f"   –ê–≤—Ç–æ—Ä: {comment['author']}")
                print(f"   –õ–∞–π–∫–∏: {comment['likes']}")
                print(f"   –¢–µ–∫—Å—Ç: {comment['text'][:100]}...")
        
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç video_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 