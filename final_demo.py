#!/usr/bin/env python3
"""
üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê COMDIG
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ YouTube

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ú–µ–≥–∞-—Å–∏—Å—Ç–µ–º—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å Gemini 2.0 Flash
- –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- –ê–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import os
import sys
import time
from typing import Dict, List
from models import Video, Comment, get_db_session
from gemini_ranker import GeminiCommentRanker
from comment_ranker import CommentRanker

class FinalDemo:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ComDig"""
    
    def __init__(self):
        self.session = get_db_session()
        
    def run_complete_demo(self, api_key: str = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üöÄ" + "="*70)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê COMDIG")
        print("üèÜ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ YouTube")
        print("="*72)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        video = self._get_demo_video()
        if not video:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–∏–¥–µ–æ.")
            return
            
        print(f"\nüìπ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {video.title}")
        print(f"üîó URL: {video.youtube_url}")
        print(f"üìù Summary: {video.summary[:100] if video.summary else '–ù–µ—Ç summary'}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = self._get_comments(video.id)
        print(f"\nüí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        self._demo_ranking_systems(video.id, api_key)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        self._show_analytics(video.id)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        self._demo_filtering(video.id)
        
        print("\nüéâ" + "="*70)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üåü –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("="*72)
    
    def _get_demo_video(self) -> Video:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"""
        return self.session.query(Video).first()
    
    def _get_comments(self, video_id: int) -> List[Comment]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ"""
        return self.session.query(Comment).filter_by(video_id=video_id).all()
    
    def _demo_ranking_systems(self, video_id: int, api_key: str = None):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nü§ñ" + "="*50)
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–Ø")
        print("="*52)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._reset_ranking(video_id)
        
        if api_key:
            print("\nüöÄ 1. –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–ê GEMINI 2.0 FLASH")
            print("-" * 40)
            self._demo_gemini_mega_ranking(video_id, api_key)
        else:
            print("\n‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Gemini –¥–µ–º–æ")
        
        print("\nüîß 2. FALLBACK –°–ò–°–¢–ï–ú–ê (–≠–í–†–ò–°–¢–ò–ö–ê)")
        print("-" * 40)
        self._demo_fallback_ranking(video_id)
    
    def _demo_gemini_mega_ranking(self, video_id: int, api_key: str):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ–≥–∞-—Å–∏—Å—Ç–µ–º—É Gemini"""
        try:
            ranker = GeminiCommentRanker(api_key=api_key, use_fallback=False)
            
            print("üì° –ó–∞–ø—É—Å–∫–∞—é –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            start_time = time.time()
            
            success = ranker.rank_comments_for_video(video_id)
            
            elapsed = time.time() - start_time
            
            if success:
                print(f"‚ö° –ú–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                self._show_top_comments(video_id, "Gemini Mega", 5)
            else:
                print("‚ùå –ú–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
    
    def _demo_fallback_ranking(self, video_id: int):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç fallback —Å–∏—Å—Ç–µ–º—É"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._reset_ranking(video_id)
            
            ranker = CommentRanker(use_fallback=True)
            
            print("üîß –ó–∞–ø—É—Å–∫–∞—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            start_time = time.time()
            
            success = ranker.rank_comments_for_video(video_id)
            
            elapsed = time.time() - start_time
            
            if success:
                print(f"‚úÖ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                self._show_top_comments(video_id, "–≠–≤—Ä–∏—Å—Ç–∏–∫–∞", 5)
            else:
                print("‚ùå –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {e}")
    
    def _show_top_comments(self, video_id: int, method: str, limit: int = 5):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
        comments = self.session.query(Comment).filter(
            Comment.video_id == video_id,
            Comment.comment_rank.isnot(None)
        ).order_by(Comment.comment_rank.desc()).limit(limit).all()
        
        print(f"\nüèÜ –¢–û–ü-{limit} –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ({method}):")
        print("-" * 50)
        
        for i, comment in enumerate(comments, 1):
            print(f"\n{i}. –†–∞–Ω–≥: {comment.comment_rank:.3f}")
            print(f"   –ê–≤—Ç–æ—Ä: {comment.author}")
            print(f"   –õ–∞–π–∫–∏: {comment.likes}")
            print(f"   –¢–µ–∫—Å—Ç: {comment.text[:80]}...")
    
    def _show_analytics(self, video_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüìä" + "="*50)
        print("üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–Ø")
        print("="*52)
        
        comments = self.session.query(Comment).filter(
            Comment.video_id == video_id,
            Comment.comment_rank.isnot(None)
        ).all()
        
        if not comments:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return
        
        ranks = [c.comment_rank for c in comments]
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(ranks)
        avg_rank = sum(ranks) / total
        max_rank = max(ranks)
        min_rank = min(ranks)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        high_quality = len([r for r in ranks if r >= 0.7])
        medium_quality = len([r for r in ranks if 0.3 <= r < 0.7])
        low_quality = len([r for r in ranks if r < 0.3])
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–Ω–≥: {avg_rank:.3f}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥: {max_rank:.3f}")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥: {min_rank:.3f}")
        
        print(f"\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:")
        print(f"   ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (‚â•0.7): {high_quality} ({high_quality/total*100:.1f}%)")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (0.3-0.7): {medium_quality} ({medium_quality/total*100:.1f}%)")
        print(f"   ‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (<0.3): {low_quality} ({low_quality/total*100:.1f}%)")
        
        # –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
        author_ranks = {}
        for comment in comments:
            if comment.author not in author_ranks:
                author_ranks[comment.author] = []
            author_ranks[comment.author].append(comment.comment_rank)
        
        top_authors = sorted(
            [(author, sum(ranks)/len(ranks), len(ranks)) 
             for author, ranks in author_ranks.items()],
            key=lambda x: x[1], reverse=True
        )[:3]
        
        print(f"\nüëë –¢–æ–ø-3 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–∞–Ω–≥—É:")
        for i, (author, avg, count) in enumerate(top_authors, 1):
            print(f"   {i}. {author}: {avg:.3f} (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {count})")
    
    def _demo_filtering(self, video_id: int):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        print("\nüîç" + "="*50)
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
        print("="*52)
        
        thresholds = [0.8, 0.6, 0.4, 0.2]
        
        for threshold in thresholds:
            comments = self.session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank >= threshold
            ).count()
            
            print(f"üìà –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ä–∞–Ω–≥–æ–º ‚â• {threshold}: {comments}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        print(f"\nüíé –ü–†–ï–ú–ò–£–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò (—Ä–∞–Ω–≥ ‚â• 0.8):")
        premium_comments = self.session.query(Comment).filter(
            Comment.video_id == video_id,
            Comment.comment_rank >= 0.8
        ).limit(3).all()
        
        for comment in premium_comments:
            print(f"   ‚Ä¢ {comment.text[:60]}... (—Ä–∞–Ω–≥: {comment.comment_rank:.3f})")
    
    def _reset_ranking(self, video_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.session.query(Comment).filter_by(video_id=video_id).update({'comment_rank': None})
        self.session.commit()
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é"""
        if hasattr(self, 'session'):
            self.session.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üé¨ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ComDig...")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    api_key = None
    for arg in sys.argv:
        if arg.startswith("--api-key="):
            api_key = arg.split("=", 1)[1]
            break
    
    if not api_key:
        api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python final_demo.py --api-key=YOUR_KEY")
    
    try:
        demo = FinalDemo()
        demo.run_complete_demo(api_key)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 