#!/usr/bin/env python3
import os
from google import genai
from google.genai import types

def test_gemini_25_debug():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Gemini 2.5"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç Gemini 2.5 Flash Preview 05-20")
    print("=" * 60)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –¢–µ—Å—Ç 1: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüß™ –¢–µ—Å—Ç 1: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (10000)")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents='Hi',
                config=types.GenerateContentConfig(
                    temperature=0.1,
                    max_output_tokens=10000
                )
            )
            
            print(f"üìã Response type: {type(response)}")
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                print(f"üìã Content: {candidate.content}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–µ–Ω: '{text}'")
                else:
                    print("‚ùå –¢–µ—Å—Ç 1: content.parts –ø—É—Å—Ç–æ–π")
            else:
                print("‚ùå –¢–µ—Å—Ç 1: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 1 –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 2: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüß™ –¢–µ—Å—Ç 2: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents='Hello'
            )
            
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–µ–Ω: '{text}'")
                else:
                    print("‚ùå –¢–µ—Å—Ç 2: content.parts –ø—É—Å—Ç–æ–π")
            else:
                print("‚ùå –¢–µ—Å—Ç 2: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 2 –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüß™ –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents='Test',
                config=types.GenerateContentConfig(
                    temperature=0.0,
                    max_output_tokens=65536  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –º–æ–¥–µ–ª–∏
                )
            )
            
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ –¢–µ—Å—Ç 3 —É—Å–ø–µ—à–µ–Ω: '{text}'")
                    return True
                else:
                    print("‚ùå –¢–µ—Å—Ç 3: content.parts –ø—É—Å—Ç–æ–π")
            else:
                print("‚ùå –¢–µ—Å—Ç 3: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 3 –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        try:
            models = client.models.list()
            gemini_models = [m for m in models if 'gemini' in m.name.lower()]
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ Gemini –º–æ–¥–µ–ª–µ–π: {len(gemini_models)}")
            for model in gemini_models:
                print(f"   - {model.name}")
                if '2.5' in model.name:
                    print(f"     ‚úÖ Gemini 2.5 –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 4 –æ—à–∏–±–∫–∞: {e}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_gemini_25_debug()
    if success:
        print("\nüéâ Gemini 2.5 Flash Preview 05-20 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é —Ç—Ä–µ–±—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è") 