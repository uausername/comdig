#!/usr/bin/env python3
import os
from google import genai
from google.genai import types

def test_ranking_prompt():
    """–¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    print("=" * 50)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        simple_prompt = """Rate this comment on a binary scale: either 0.0 or 1.0.

Video content: This video shows how to cook pasta.

Comment: "Great recipe! I tried it and it worked perfectly."

Respond with only a number either 0.0 or 1.0:"""
        
        print("\nüß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents=simple_prompt,
                config=types.GenerateContentConfig(
                    temperature=0.1,
                    max_output_tokens=10000
                )
            )
            
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–µ–Ω: '{text.strip()}'")
                else:
                    print("‚ùå –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç: content.parts –ø—É—Å—Ç–æ–π")
            else:
                print("‚ùå –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –æ—à–∏–±–∫–∞: {e}")
        
        # –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        batch_prompt = """Rate the informativeness of these comments relative to the video content on a binary scale: either 0.0 or 1.0.

Video content: This video shows how to cook pasta.

Comments (3 total):
1. Great recipe! I tried it and it worked perfectly.
2. First!
3. What temperature should the water be?

Respond with EXACTLY 3 ratings separated by commas.
Ratings:"""
        
        print("\nüß™ –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents=batch_prompt,
                config=types.GenerateContentConfig(
                    temperature=0.1,
                    max_output_tokens=10000
                )
            )
            
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–µ–Ω: '{text.strip()}'")
                    return True
                else:
                    print("‚ùå –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç: content.parts –ø—É—Å—Ç–æ–π")
            else:
                print("‚ùå –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ—à–∏–±–∫–∞: {e}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_ranking_prompt()
    if success:
        print("\nüéâ –ü—Ä–æ–º–ø—Ç—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è") 