#!/usr/bin/env python3
import os
from google import genai
from google.genai import types

def test_summary_debug():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary")
    print("=" * 60)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π)
        test_transcript = """–û–¥–Ω–∞ –∑ –Ω–∞–π—Å–º–∞—á–Ω—ñ—à–∏—Ö –≤–∑–∞–≥–∞–ª—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫—É—Ö–æ–Ω—å –≤ –ö–∏—î–≤—ñ. –ë–µ–±—ñ –≤–æ—Å—å–º–∏–∂–æ–∫. –ô–æ–≥–æ —è —ó—Å—Ç–∏ –Ω–µ –±—É–¥—É. –ô–æ–≥–æ –º–∏ –≤—ñ–¥–ø—É—Å—Ç–∏–º–æ –Ω–∞–∑–∞–¥ —É —Ä—ñ—á–∫—É. –§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –î—É–∂–µ —Å–º–∞—á–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è. –¢—É—Ç –≥–æ—Ç—É—é—Ç—å –±–æ—Ä—â, –≤–∞—Ä–µ–Ω–∏–∫–∏, –∫–æ—Ç–ª–µ—Ç–∏ –ø–æ-–∫–∏—ó–≤—Å—å–∫–∏."""
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary (–∫–∞–∫ –≤ process_video.py)
        prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (summary) —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
                    
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 20-30 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –Ø–∑—ã–∫: English
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ß–µ—Ç–∫–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
{test_transcript}...

Summary:"""
        
        print(f"üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìù –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{len(prompt.split())}")
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
        for max_tokens in [200, 500, 1000, 2000]:
            print(f"\nüß™ –¢–µ—Å—Ç —Å max_output_tokens={max_tokens}")
            try:
                response = client.models.generate_content(
                    model='gemini-2.5-flash-preview-05-20',
                    contents=prompt,
                    config=types.GenerateContentConfig(
                        temperature=0.3,
                        max_output_tokens=max_tokens,
                        top_p=0.8
                    )
                )
                
                if response and response.text:
                    print(f"‚úÖ –£—Å–ø–µ—Ö! –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                    return True
                elif response and hasattr(response, 'candidates') and response.candidates:
                    candidate = response.candidates[0]
                    print(f"üìã Finish reason: {candidate.finish_reason}")
                    if candidate.content and candidate.content.parts:
                        text = candidate.content.parts[0].text
                        print(f"‚úÖ –£—Å–ø–µ—Ö! –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {text[:100]}...")
                        return True
                    else:
                        print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π")
                else:
                    print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å {max_tokens} —Ç–æ–∫–µ–Ω–∞–º–∏: {e}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_summary_debug()
    if success:
        print("\nüéâ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π summary —á–µ—Ä–µ–∑ Gemini API") 