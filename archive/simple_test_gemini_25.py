#!/usr/bin/env python3
import os
from google import genai
from google.genai import types

def test_gemini_25():
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é Gemini 2.5 Flash Preview 05-20...")
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        response = client.models.generate_content(
            model='gemini-2.5-flash-preview-05-20',
            contents='–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ç–µ—Å—Ç',
            config=types.GenerateContentConfig(
                temperature=0.1,
                max_output_tokens=100
            )
        )
        
        print(f"üìã –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {type(response)}")
        
        if response and hasattr(response, 'text') and response.text:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: '{response.text.strip()}'")
            return True
        elif response and hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            print(f"üìã Finish reason: {candidate.finish_reason}")
            
            if candidate.content and candidate.content.parts:
                text = candidate.content.parts[0].text
                print(f"‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: '{text.strip()}'")
                return True
            else:
                print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π")
                return False
        else:
            print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_gemini_25()
    if success:
        print("üéâ Gemini 2.5 Flash Preview 05-20 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") 