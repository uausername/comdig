#!/usr/bin/env python3
import os
from google import genai
from google.genai import types

def test_summary_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary —á–µ—Ä–µ–∑ Gemini"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary —á–µ—Ä–µ–∑ Gemini")
    print("=" * 50)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        test_transcript = """
        –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–µ–≥–æ–¥–Ω—è —è –ø–æ–∫–∞–∂—É –≤–∞–º, –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—É—é –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞.
        –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è: —Å–ø–∞–≥–µ—Ç—Ç–∏, —è–π—Ü–∞, –±–µ–∫–æ–Ω, —Å—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω –∏ —á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü.
        –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–∞—Ä–∏–º –ø–∞—Å—Ç—É –≤ –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–µ –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª—å –¥–µ–Ω—Ç–µ.
        –ó–∞—Ç–µ–º –æ–±–∂–∞—Ä–∏–º –±–µ–∫–æ–Ω –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞.
        """
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
        summary_prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞:

{test_transcript}

–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:"""
        
        print("\nüß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary")
        try:
            response = client.models.generate_content(
                model='gemini-2.5-flash-preview-05-20',
                contents=summary_prompt,
                config=types.GenerateContentConfig(
                    temperature=0.3,
                    max_output_tokens=5000
                )
            )
            
            if response and hasattr(response, 'candidates') and response.candidates:
                candidate = response.candidates[0]
                print(f"üìã Finish reason: {candidate.finish_reason}")
                
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"‚úÖ Summary —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:")
                    print(f"   {text.strip()}")
                    return True
                else:
                    print("‚ùå Summary: content.parts –ø—É—Å—Ç–æ–π")
                    print(f"üìã Candidate: {candidate}")
            else:
                print("‚ùå Summary: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                print(f"üìã Response: {response}")
        except Exception as e:
            print(f"‚ùå Summary –æ—à–∏–±–∫–∞: {e}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_summary_generation()
    if success:
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π summary") 