#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
from google import genai
from google.genai import types

def test_simple_ranking():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt = """Rate this comment on a binary scale: either 0.0 or 1.0.

Video content: This video shows how to use cannabis products safely.

Comment: "@sports1226 there's only 10mg in the honey stick..."

Respond with only a number either 0.0 or 1.0:"""
        
        print("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
        
        response = client.models.generate_content(
            model='gemini-2.5-flash-preview-05-20',
            contents=prompt,
            config=types.GenerateContentConfig(
                temperature=0.1,
                max_output_tokens=1000,
                top_p=0.8
            )
        )
        
        print(f"üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç—É
        if hasattr(response, 'text') and response.text:
            print(f"‚úÖ –ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç: '{response.text.strip()}'")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        elif hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            print(f"üìã Finish reason: {candidate.finish_reason}")
            
            if candidate.content and candidate.content.parts and candidate.content.parts[0].text:
                text = candidate.content.parts[0].text
                print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: '{text.strip()}'")
                return True
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ")
                return False
        else:
            print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_batch_ranking():
    """–¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("\nüîç –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    try:
        client = genai.Client(
            api_key=api_key,
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        
        # –ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = """Rate the informativeness of these comments relative to the video content on a binary scale: either 0.0 or 1.0.

Video content: This video shows how to use cannabis products safely.

Comments (3 total):
1. @sports1226 there's only 10mg in the honey stick...
2. THat's correct about 3!...
3. 5mg if you don't have a tolerance....

Respond with EXACTLY 3 ratings separated by commas.
Ratings:"""
        
        print("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é –±–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        
        response = client.models.generate_content(
            model='gemini-2.5-flash-preview-05-20',
            contents=prompt,
            config=types.GenerateContentConfig(
                temperature=0.1,
                max_output_tokens=1000,
                top_p=0.8
            )
        )
        
        print(f"üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç—É
        if hasattr(response, 'text') and response.text:
            print(f"‚úÖ –ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç: '{response.text.strip()}'")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        elif hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            print(f"üìã Finish reason: {candidate.finish_reason}")
            
            if candidate.content and candidate.content.parts and candidate.content.parts[0].text:
                text = candidate.content.parts[0].text
                print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: '{text.strip()}'")
                return True
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ")
                return False
        else:
            print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ú–£–õ–¨–¢–ò–ö–õ–Æ–ß–ï–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    success1 = test_simple_ranking()
    success2 = test_batch_ranking()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞") 