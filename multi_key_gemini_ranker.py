#!/usr/bin/env python3
"""
üöÄ –ú–£–õ–¨–¢–ò–ö–õ–Æ–ß–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–Ø GEMINI
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ 3-5 —Ä–∞–∑

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –†–æ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
"""

import google.generativeai as genai
import time
import random
import os
import asyncio
import concurrent.futures
from typing import List, Dict, Optional, Tuple
from sqlalchemy.orm import Session
from models import Video, Comment, get_db_session
from datetime import datetime, timedelta
from gemini_ranker import GeminiRateLimiter

class MultiKeyGeminiRanker:
    """–ú—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å Gemini API"""
    
    def __init__(self, api_keys: List[str] = None, use_fallback: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            api_keys: –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            use_fallback: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if api_keys:
            self.api_keys = api_keys
        else:
            self.api_keys = self._load_api_keys_from_env()
        
        if not self.api_keys:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ API –∫–ª—é—á–µ–π –¥–ª—è –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        print(f"üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å {len(self.api_keys)} API –∫–ª—é—á–∞–º–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.batch_size = 10  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 20 –¥–æ 10 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.use_fallback = use_fallback
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ rate limiters –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        self.models = {}
        self.rate_limiters = {}
        self.key_usage_stats = {}
        
        for i, api_key in enumerate(self.api_keys, 1):
            key_name = f"key_{i}"
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
            genai.configure(api_key=api_key)
            self.models[key_name] = genai.GenerativeModel('gemini-2.0-flash')
            
            # –°–æ–∑–¥–∞–µ–º rate limiter –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã)
            self.rate_limiters[key_name] = GeminiRateLimiter()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.key_usage_stats[key_name] = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = genai.types.GenerationConfig(
            temperature=0.1,
            max_output_tokens=500,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            top_p=0.8,
            top_k=40
        )
        
    def _load_api_keys_from_env(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        keys = []
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
        for i in range(1, 10):  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 9 –∫–ª—é—á–µ–π
            key = os.getenv(f'GEMINI_API_KEY_{i}')
            if key:
                keys.append(key)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        if not keys:
            main_key = os.getenv('GEMINI_API_KEY')
            if main_key:
                keys.append(main_key)
        
        return keys
    
    def get_best_available_key(self, estimated_tokens: int = 1000) -> Optional[Tuple[str, str, GeminiRateLimiter]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π API –∫–ª—é—á —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
        
        Returns:
            Tuple[key_name, api_key, rate_limiter] –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã
        """
        available_keys = []
        
        for key_name, rate_limiter in self.rate_limiters.items():
            if rate_limiter.can_make_request(estimated_tokens):
                status = rate_limiter.get_status()
                # –í—ã—á–∏—Å–ª—è–µ–º "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å" –∫–ª—é—á–∞ (0-1, –≥–¥–µ 0 = —Å–≤–æ–±–æ–¥–µ–Ω)
                rpm_load = status['rpm_used'] / status['rpm_limit']
                tpm_load = status['tpm_used'] / status['tpm_limit']
                rpd_load = status['rpd_used'] / status['rpd_limit']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                usage_factor = self.key_usage_stats[key_name] / max(1, sum(self.key_usage_stats.values()))
                
                total_load = (rpm_load + tpm_load + rpd_load + usage_factor) / 4
                available_keys.append((key_name, total_load))
                
                print(f"üîç {key_name}: RPM {status['rpm_used']}/{status['rpm_limit']}, "
                      f"TPM {status['tpm_used']}/{status['tpm_limit']}, "
                      f"RPD {status['rpd_used']}/{status['rpd_limit']}, "
                      f"Usage: {self.key_usage_stats[key_name]}, Load: {total_load:.3f}")
        
        if not available_keys:
            print("‚ö†Ô∏è –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç—ã")
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π)
        available_keys.sort(key=lambda x: x[1])
        best_key_name = available_keys[0][0]
        
        api_key = self.api_keys[int(best_key_name.split('_')[1]) - 1]
        rate_limiter = self.rate_limiters[best_key_name]
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω {best_key_name} (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {available_keys[0][1]:.3f})")
        
        return best_key_name, api_key, rate_limiter
    
    def rank_comments_for_video(self, video_id: int) -> bool:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Å –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        """
        session = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏ –µ–≥–æ summary
            video = session.query(Video).filter_by(id=video_id).first()
            if not video:
                print(f"‚ùå –í–∏–¥–µ–æ —Å ID {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            if not video.summary:
                print(f"‚ùå –£ –≤–∏–¥–µ–æ {video_id} –Ω–µ—Ç summary –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ —Ä–∞–Ω–≥–∞
            comments = session.query(Comment).filter_by(
                video_id=video_id, 
                comment_rank=None
            ).all()
            
            if not comments:
                print(f"‚úÖ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {video_id} —É–∂–µ –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã")
                return True
                
            print(f"üöÄ –ú–£–õ–¨–¢–ò–ö–õ–Æ–ß–ï–í–û–ï –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï")
            print(f"üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
            print(f"üîë API –∫–ª—é—á–µ–π: {len(self.api_keys)}")
            print(f"‚ö° –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {len(self.api_keys)}x")
            print("-" * 60)
            
            start_time = time.time()
            
            # –ü—Ä–æ–±—É–µ–º –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å —Å –ª—É—á—à–∏–º –∫–ª—é—á–æ–º
            if len(comments) <= 100:  # –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –ø—Ä–æ–±—É–µ–º –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å
                success = self._try_mega_request(comments, video.summary, session)
                if success:
                    elapsed = time.time() - start_time
                    print(f"‚úÖ –ú–µ–≥–∞-–∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫")
                    session.commit()
                    return True
            
            # Fallback –∫ –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤—É—é –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            success = self._rank_comments_multikey_batches(comments, video.summary, session)
            
            if success:
                elapsed = time.time() - start_time
                print(f"‚úÖ –ú—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π:")
                for key_name, usage in self.key_usage_stats.items():
                    print(f"   {key_name}: {usage} –∑–∞–ø—Ä–æ—Å–æ–≤")
                session.commit()
                return True
            else:
                print("‚ùå –ú—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            session.rollback()
            return False
        finally:
            session.close()
    
    def _try_mega_request(self, comments: List[Comment], video_summary: str, session: Session) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–Ω–∏–º –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å–æ–º"""
        try:
            print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
            key_info = self.get_best_available_key(len(comments) * 10)
            if not key_info:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å–∞")
                return False
            
            key_name, api_key, rate_limiter = key_info
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
            genai.configure(api_key=api_key)
            model = self.models[key_name]
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç
            prompt = self._create_mega_ranking_prompt(comments, video_summary)
            estimated_tokens = len(prompt.split()) + len(comments) * 3
            
            # –ñ–¥–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            wait_time = rate_limiter.wait_if_needed(estimated_tokens)
            if wait_time > 0:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫ –¥–ª—è –∫–ª—é—á–∞ {key_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            mega_config = genai.types.GenerationConfig(
                temperature=0.1,
                max_output_tokens=2000,
                top_p=0.8,
                top_k=40
            )
            
            response = model.generate_content(prompt, generation_config=mega_config)
            rate_limiter.record_request(estimated_tokens)
            self.key_usage_stats[key_name] += 1
            
            if response and response.text:
                ranks = self._extract_mega_ranks_from_response(response.text, len(comments))
                if ranks and len(ranks) == len(comments):
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–Ω–≥–∏
                    for comment, rank in zip(comments, ranks):
                        comment.comment_rank = rank
                    print(f"‚úÖ –ú–µ–≥–∞-–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω —Å –∫–ª—é—á–æ–º {key_name}")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def _rank_comments_multikey_batches(self, comments: List[Comment], video_summary: str, session: Session) -> bool:
        """–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –±–∞—Ç—á–∏
        batches = [comments[i:i + self.batch_size] for i in range(0, len(comments), self.batch_size)]
        total_batches = len(batches)
        successful_batches = 0
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {total_batches} –±–∞—Ç—á–µ–π –ø–æ {self.batch_size} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
        for i, batch in enumerate(batches):
            batch_num = i + 1
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num}/{total_batches}")
            
            success = self._process_batch_with_best_key(batch, video_summary, batch_num, total_batches)
            
            if success:
                successful_batches += 1
                print(f"‚úÖ –ë–∞—Ç—á {batch_num}/{total_batches} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –ë–∞—Ç—á {batch_num}/{total_batches} –Ω–µ —É–¥–∞–ª—Å—è")
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
            if batch_num < total_batches:
                time.sleep(1)
        
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_batches}/{total_batches} –±–∞—Ç—á–µ–π")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_batches/total_batches*100:.1f}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
        print(f"\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π:")
        for key_name, usage in self.key_usage_stats.items():
            print(f"   {key_name}: {usage} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        return successful_batches > 0
    
    def _process_batch_with_best_key(self, batch: List[Comment], video_summary: str, batch_num: int, total_batches: int) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–∏–ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
                key_info = self.get_best_available_key(self.batch_size * 5)
                
                if not key_info:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                    print(f"‚è≥ –ë–∞—Ç—á {batch_num}: –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–Ω—è—Ç—ã, –æ–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫...")
                    time.sleep(30)
                    continue
                
                key_name, api_key, rate_limiter = key_info
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
                genai.configure(api_key=api_key)
                model = self.models[key_name]
                
                print(f"üîë –ë–∞—Ç—á {batch_num}/{total_batches}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {key_name}")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∞—Ç—á–∞
                prompt = self._create_batch_ranking_prompt(batch, video_summary)
                estimated_tokens = len(prompt.split()) + len(batch) * 3
                
                # –ñ–¥–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã
                wait_time = rate_limiter.wait_if_needed(estimated_tokens)
                if wait_time > 0:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ {key_name}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = model.generate_content(prompt, generation_config=self.generation_config)
                rate_limiter.record_request(estimated_tokens)
                self.key_usage_stats[key_name] += 1
                
                if response and response.text:
                    ranks = self._extract_batch_ranks_from_response(response.text, len(batch))
                    if ranks and len(ranks) == len(batch):
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–Ω–≥–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
                        for comment, rank in zip(batch, ranks):
                            comment.comment_rank = rank
                        print(f"‚úÖ –ë–∞—Ç—á {batch_num} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å {key_name}")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞–Ω–≥–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ {key_name}")
                else:
                    print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {key_name}")
                
            except Exception as e:
                error_msg = str(e)
                print(f"‚ö†Ô∏è –ë–∞—Ç—á {batch_num}, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1} —Å {key_name if 'key_name' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–ª—é—á–æ–º'}: {error_msg}")
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ 429 (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–≤–æ—Ç—ã) –ø–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
                if "429" in error_msg or "quota" in error_msg.lower():
                    if 'key_name' in locals() and 'rate_limiter' in locals():
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
                        rate_limiter.record_request(10000)  # –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                        print(f"üö´ –ö–ª—é—á {key_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–≤–æ—Ç—ã")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < max_attempts - 1:
                    wait_time = min(10 * (attempt + 1), 60)  # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(wait_time)
        
        print(f"‚ùå –ë–∞—Ç—á {batch_num} –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def _create_mega_ranking_prompt(self, comments: List[Comment], video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        comments_text = ""
        for i, comment in enumerate(comments, 1):
            comment_preview = comment.text[:500] + "..." if len(comment.text) > 500 else comment.text
            comments_text += f"{i}. {comment_preview}\n"
        
        return f"""Rate the informativeness of ALL these comments relative to the video content on a scale from 0.0 to 1.0.

Video content: {video_summary}

Comments ({len(comments)} total):
{comments_text}

Rating criteria:
- 1.0: Comment adds significant value, complements or clarifies video content
- 0.7-0.9: Comment is relevant and contains useful information  
- 0.4-0.6: Comment is partially related to video topic
- 0.1-0.3: Comment is weakly related to content
- 0.0: Comment is unrelated to video (spam, off-topic, emotions without content)

IMPORTANT: Respond with EXACTLY {len(comments)} ratings separated by commas, one for each comment in order.
Example format: 0.8, 0.3, 0.9, 0.1, 0.7, 0.2, ...

Ratings:"""
    
    def _create_batch_ranking_prompt(self, comments: List[Comment], video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        comments_text = ""
        for i, comment in enumerate(comments, 1):
            comment_preview = comment.text[:300] + "..." if len(comment.text) > 300 else comment.text
            comments_text += f"{i}. {comment_preview}\n"
        
        return f"""Rate the informativeness of these comments relative to the video content on a scale from 0.0 to 1.0.

Video content: {video_summary}

Comments ({len(comments)} total):
{comments_text}

Rating criteria:
- 1.0: Highly informative, adds significant value
- 0.7-0.9: Relevant and useful information
- 0.4-0.6: Partially related to video topic
- 0.1-0.3: Weakly related to content
- 0.0: Unrelated to video (spam, off-topic)

Respond with EXACTLY {len(comments)} ratings separated by commas.
Ratings:"""
    
    def _extract_mega_ranks_from_response(self, response: str, expected_count: int) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –º–µ–≥–∞-–æ—Ç–≤–µ—Ç–∞"""
        try:
            import re
            
            lines = response.strip().split('\n')
            ratings_line = None
            
            for line in lines:
                if ',' in line and re.search(r'[0-1]\.\d+', line):
                    ratings_line = line
                    break
            
            if not ratings_line:
                ratings_line = response
            
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, ratings_line)
            
            if len(matches) >= expected_count:
                ranks = []
                for i in range(expected_count):
                    try:
                        rank = float(matches[i])
                        ranks.append(max(0.0, min(1.0, rank)))
                    except (ValueError, IndexError):
                        ranks.append(0.5)
                return ranks
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–≥–∞-—Ä–∞–Ω–≥–æ–≤: {e}")
            return None
    
    def _extract_batch_ranks_from_response(self, response: str, expected_count: int) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–∞—Ç—á–∞"""
        try:
            import re
            
            # –ò—â–µ–º —á–∏—Å–ª–∞ –æ—Ç 0.0 –¥–æ 1.0
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, response)
            
            if len(matches) >= expected_count:
                ranks = []
                for i in range(expected_count):
                    try:
                        rank = float(matches[i])
                        ranks.append(max(0.0, min(1.0, rank)))
                    except (ValueError, IndexError):
                        ranks.append(0.5)
                return ranks
            else:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–Ω–≥–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: –ø–æ–ª—É—á–µ–Ω–æ {len(matches)}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}")
                print(f"   –û—Ç–≤–µ—Ç: '{response.strip()}'")
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –±–∞—Ç—á–∞: {e}")
            return None
    
    def get_key_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π"""
        stats = {}
        for key_name, rate_limiter in self.rate_limiters.items():
            status = rate_limiter.get_status()
            stats[key_name] = {
                'requests_used': self.key_usage_stats[key_name],
                'rpm_status': f"{status['rpm_used']}/{status['rpm_limit']}",
                'tpm_status': f"{status['tpm_used']}/{status['tpm_limit']}",
                'rpd_status': f"{status['rpd_used']}/{status['rpd_limit']}"
            }
        return stats

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python multi_key_gemini_ranker.py VIDEO_ID")
        sys.exit(1)
    
    try:
        video_id = int(sys.argv[1])
        
        print("üöÄ –ó–ê–ü–£–°–ö –ú–£–õ–¨–¢–ò–ö–õ–Æ–ß–ï–í–û–ô –°–ò–°–¢–ï–ú–´ –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        ranker = MultiKeyGeminiRanker()
        success = ranker.rank_comments_for_video(video_id)
        
        if success:
            print("\n‚úÖ –ú–£–õ–¨–¢–ò–ö–õ–Æ–ß–ï–í–û–ï –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π:")
            stats = ranker.get_key_statistics()
            for key_name, key_stats in stats.items():
                print(f"   {key_name}: {key_stats['requests_used']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                      f"RPM: {key_stats['rpm_status']}, "
                      f"TPM: {key_stats['tpm_status']}")
        else:
            print("\n‚ùå –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except ValueError:
        print("‚ùå VIDEO_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
