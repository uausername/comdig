import google.generativeai as genai
import time
import random
import os
from typing import List, Dict, Optional
from sqlalchemy.orm import Session
from models import Video, Comment, get_db_session
from datetime import datetime, timedelta

class GeminiRateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Gemini API"""
    
    def __init__(self):
        # –õ–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ Gemini 2.0 Flash
        self.rpm_limit = 30  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        self.tpm_limit = 1000000  # —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        self.rpd_limit = 1500  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.requests_minute = []  # —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        self.requests_day = []  # —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        self.tokens_minute = []  # —Å–ø–∏—Å–æ–∫ (–≤—Ä–µ–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–æ–∫–µ–Ω–æ–≤) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        
    def can_make_request(self, estimated_tokens: int = 1000) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
        now = datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._cleanup_old_records(now)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        rpm_ok = len(self.requests_minute) < self.rpm_limit
        rpd_ok = len(self.requests_day) < self.rpd_limit
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        current_tokens = sum(tokens for _, tokens in self.tokens_minute)
        tpm_ok = (current_tokens + estimated_tokens) <= self.tpm_limit
        
        return rpm_ok and rpd_ok and tpm_ok
    
    def wait_if_needed(self, estimated_tokens: int = 1000) -> float:
        """–ñ–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è."""
        if self.can_make_request(estimated_tokens):
            return 0.0
        
        now = datetime.now()
        self._cleanup_old_records(now)
        
        wait_times = []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è RPM
        if len(self.requests_minute) >= self.rpm_limit:
            oldest_request = min(self.requests_minute)
            wait_time_rpm = 60 - (now - oldest_request).total_seconds()
            if wait_time_rpm > 0:
                wait_times.append(wait_time_rpm)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è TPM
        current_tokens = sum(tokens for _, tokens in self.tokens_minute)
        if (current_tokens + estimated_tokens) > self.tpm_limit:
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è —Ç–æ–∫–µ–Ω—ã
            if self.tokens_minute:
                oldest_token_time = min(time for time, _ in self.tokens_minute)
                wait_time_tpm = 60 - (now - oldest_token_time).total_seconds()
                if wait_time_tpm > 0:
                    wait_times.append(wait_time_tpm)
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        if wait_times:
            wait_time = max(wait_times)
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API...")
            time.sleep(wait_time)
            return wait_time
        
        return 0.0
    
    def record_request(self, tokens_used: int = 1000):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        now = datetime.now()
        self.requests_minute.append(now)
        self.requests_day.append(now)
        self.tokens_minute.append((now, tokens_used))
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._cleanup_old_records(now)
    
    def _cleanup_old_records(self, now: datetime):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏"""
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
        minute_ago = now - timedelta(minutes=1)
        self.requests_minute = [t for t in self.requests_minute if t > minute_ago]
        self.tokens_minute = [(t, tokens) for t, tokens in self.tokens_minute if t > minute_ago]
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ –¥–Ω—è
        day_ago = now - timedelta(days=1)
        self.requests_day = [t for t in self.requests_day if t > day_ago]
    
    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤"""
        now = datetime.now()
        self._cleanup_old_records(now)
        
        current_tokens = sum(tokens for _, tokens in self.tokens_minute)
        
        return {
            'rpm_used': len(self.requests_minute),
            'rpm_limit': self.rpm_limit,
            'rpd_used': len(self.requests_day),
            'rpd_limit': self.rpd_limit,
            'tpm_used': current_tokens,
            'tpm_limit': self.tpm_limit
        }

class GeminiCommentRanker:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Gemini API"""
    
    def __init__(self, api_key: str = None, use_fallback: bool = True):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
        if api_key:
            genai.configure(api_key=api_key)
        elif os.getenv('GEMINI_API_KEY'):
            genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
        else:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å GEMINI_API_KEY")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.model = genai.GenerativeModel('gemini-2.0-flash')
        self.batch_size = 20  # Gemini –±—ã—Å—Ç—Ä–µ–µ, –º–æ–∂–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        self.use_fallback = use_fallback
        self.max_retries = 1
        
        # –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
        self.rate_limiter = GeminiRateLimiter()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = genai.types.GenerationConfig(
            temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            max_output_tokens=50,  # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            top_p=0.8,
            top_k=40
        )
        
    def rank_comments_for_video(self, video_id: int) -> bool:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        
        Args:
            video_id: ID –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        session = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏ –µ–≥–æ summary
            video = session.query(Video).filter_by(id=video_id).first()
            if not video:
                print(f"‚ùå –í–∏–¥–µ–æ —Å ID {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            if not video.summary:
                print(f"‚ùå –£ –≤–∏–¥–µ–æ {video_id} –Ω–µ—Ç summary –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ —Ä–∞–Ω–≥–∞
            comments = session.query(Comment).filter_by(
                video_id=video_id, 
                comment_rank=None
            ).all()
            
            if not comments:
                print(f"‚úÖ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {video_id} —É–∂–µ –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã")
                return True
                
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
            print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: Google Gemini 2.0 Flash (–∫–æ–Ω—Ç–µ–∫—Å—Ç: ~1M —Ç–æ–∫–µ–Ω–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API
            gemini_available = self._check_gemini_availability()
            if not gemini_available and self.use_fallback:
                print("‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                return self._fallback_rank_all_comments(comments, video.summary, session)
            elif not gemini_available:
                print("‚ùå Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ fallback –æ—Ç–∫–ª—é—á–µ–Ω")
                return False
            
            # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            success = self._rank_all_comments_single_request(comments, video.summary, session)
            
            if success:
                session.commit()
                print(f"‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –±–∞—Ç—á–∏")
                # Fallback –∫ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                return self._rank_comments_in_batches(comments, video.summary, session)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            session.rollback()
            return False
        finally:
            session.close()
    
    def _check_gemini_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API...")
            
            # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã
            estimated_tokens = 20  # –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            wait_time = self.rate_limiter.wait_if_needed(estimated_tokens)
            if wait_time > 0:
                status = self.rate_limiter.get_status()
                print(f"üìä –õ–∏–º–∏—Ç—ã: {status['rpm_used']}/{status['rpm_limit']} RPM, {status['tpm_used']}/{status['tpm_limit']} TPM")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = self.model.generate_content(
                "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ç–µ—Å—Ç",
                generation_config=self.generation_config
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.rate_limiter.record_request(estimated_tokens)
            
            if response and response.text:
                print(f"‚úÖ Gemini API –¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.text.strip()}")
                return True
            else:
                print("‚ùå Gemini API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Gemini API: {e}")
            if "429" in str(e) or "quota" in str(e).lower():
                print("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
            return False
    
    def _process_batch(self, comments: List[Comment], video_summary: str, session: Session, gemini_available: bool) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        successful_ranks = 0
        
        if gemini_available:
            # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—Å—å –±–∞—Ç—á –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            try:
                ranks = self._rank_batch_gemini(comments, video_summary)
                if ranks and len(ranks) == len(comments):
                    for comment, rank in zip(comments, ranks):
                        if rank is not None:
                            comment.comment_rank = rank
                            successful_ranks += 1
                            print(f"üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}: —Ä–∞–Ω–≥ {rank:.3f} (Gemini)")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}")
                    return successful_ranks
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é")
        
        # Fallback: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É
        for comment in comments:
            try:
                if gemini_available:
                    rank = self._rank_single_comment_gemini(comment.text, video_summary)
                else:
                    rank = self._rank_single_comment_fallback(comment.text, video_summary)
                    
                if rank is not None:
                    comment.comment_rank = rank
                    successful_ranks += 1
                    method = "Gemini" if gemini_available else "—ç–≤—Ä–∏—Å—Ç–∏–∫–∞"
                    print(f"üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}: —Ä–∞–Ω–≥ {rank:.3f} ({method})")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID {comment.id}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID {comment.id}: {e}")
        
        return successful_ranks
    
    def _rank_batch_gemini(self, comments: List[Comment], video_summary: str) -> Optional[List[float]]:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –±–∞—Ç—á –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ Gemini"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            prompt = self._create_batch_ranking_prompt(comments, video_summary)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            estimated_tokens = len(prompt.split()) + len(comments) * 5  # –ø—Ä–æ–º–ø—Ç + –æ—Ç–≤–µ—Ç—ã
            
            for attempt in range(self.max_retries):
                try:
                    # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã
                    wait_time = self.rate_limiter.wait_if_needed(estimated_tokens)
                    if wait_time > 0:
                        status = self.rate_limiter.get_status()
                        print(f"üìä –õ–∏–º–∏—Ç—ã: {status['rpm_used']}/{status['rpm_limit']} RPM, {status['tpm_used']}/{status['tpm_limit']} TPM")
                    
                    response = self.model.generate_content(
                        prompt,
                        generation_config=self.generation_config
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    self.rate_limiter.record_request(estimated_tokens)
                    
                    if response and response.text:
                        ranks = self._extract_batch_ranks_from_response(response.text, len(comments))
                        if ranks:
                            return ranks
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if "429" in str(e) or "quota" in str(e).lower():
                        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                        wait_time = 60  # –∂–¥–µ–º –º–∏–Ω—É—Ç—É
                        print(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫...")
                        time.sleep(wait_time)
                    elif attempt < self.max_retries - 1:
                        time.sleep(1)
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _rank_single_comment_gemini(self, comment_text: str, video_summary: str) -> Optional[float]:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é Gemini"""
        prompt = self._create_ranking_prompt(comment_text, video_summary)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        estimated_tokens = len(prompt.split()) + 50  # –ø—Ä–æ–º–ø—Ç + –æ—Ç–≤–µ—Ç
        
        for attempt in range(self.max_retries):
            try:
                # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã
                wait_time = self.rate_limiter.wait_if_needed(estimated_tokens)
                if wait_time > 0:
                    status = self.rate_limiter.get_status()
                    print(f"üìä –õ–∏–º–∏—Ç—ã: {status['rpm_used']}/{status['rpm_limit']} RPM, {status['tpm_used']}/{status['tpm_limit']} TPM")
                
                response = self.model.generate_content(
                    prompt,
                    generation_config=self.generation_config
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                self.rate_limiter.record_request(estimated_tokens)
                
                if response and response.text:
                    rank = self._extract_rank_from_response(response.text)
                    if rank is not None:
                        return rank
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}: {e}")
                if "429" in str(e) or "quota" in str(e).lower():
                    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                    wait_time = 60  # –∂–¥–µ–º –º–∏–Ω—É—Ç—É
                    print(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫...")
                    time.sleep(wait_time)
                elif attempt < self.max_retries - 1:
                    time.sleep(1)
        
        # –ï—Å–ª–∏ Gemini –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if self.use_fallback:
            return self._rank_single_comment_fallback(comment_text, video_summary)
        
        return None
    
    def _rank_single_comment_fallback(self, comment_text: str, video_summary: str) -> float:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–º–æ—â—å—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        rank = 0.5  # –±–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥
        
        # –î–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
        if len(comment_text) > 100:
            rank += 0.2
        elif len(comment_text) < 20:
            rank -= 0.2
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏
        if '?' in comment_text:
            rank += 0.1
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ —Å —ç–º–æ–¥–∑–∏ –º–µ–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
        if len(comment_text.strip()) < 10 and any(ord(char) > 127 for char in comment_text):
            rank -= 0.3
            
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã
        keywords = ['—Ä–µ—Ü–µ–ø—Ç', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–≤–∫—É—Å', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–≤—Ä–µ–º—è', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '—á—Ç–æ']
        for keyword in keywords:
            if keyword.lower() in comment_text.lower():
                rank += 0.15
                break
                
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        rank += random.uniform(-0.1, 0.1)
        
        return max(0.0, min(1.0, rank))
    
    def _create_ranking_prompt(self, comment_text: str, video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        return f"""Rate the informativeness of this comment relative to the video content on a scale from 0.0 to 1.0.

Video content: {video_summary}

Comment: {comment_text}

Rating criteria:
- 1.0: Comment adds significant value, complements or clarifies video content
- 0.7-0.9: Comment is relevant and contains useful information
- 0.4-0.6: Comment is partially related to video topic
- 0.1-0.3: Comment is weakly related to content
- 0.0: Comment is unrelated to video (spam, off-topic, emotions without content)

Respond with only a number from 0.0 to 1.0:"""
    
    def _create_batch_ranking_prompt(self, comments: List[Comment], video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        comments_text = ""
        for i, comment in enumerate(comments, 1):
            comments_text += f"{i}. {comment.text}\n"
        
        return f"""Rate the informativeness of these comments relative to the video content on a scale from 0.0 to 1.0.

Video content: {video_summary}

Comments:
{comments_text}

Rating criteria:
- 1.0: Comment adds significant value, complements or clarifies video content
- 0.7-0.9: Comment is relevant and contains useful information
- 0.4-0.6: Comment is partially related to video topic
- 0.1-0.3: Comment is weakly related to content
- 0.0: Comment is unrelated to video (spam, off-topic, emotions without content)

Respond with only the ratings separated by commas (e.g., 0.8, 0.3, 0.9, 0.1):"""
    
    def _extract_rank_from_response(self, response: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini"""
        try:
            import re
            # –ò—â–µ–º —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, response)
            
            if matches:
                rank = float(matches[0])
                return max(0.0, min(1.0, rank))
            
            return None
            
        except (ValueError, IndexError):
            return None
    
    def _extract_batch_ranks_from_response(self, response: str, expected_count: int) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            import re
            # –ò—â–µ–º —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, response)
            
            if len(matches) == expected_count:
                ranks = []
                for match in matches:
                    rank = float(match)
                    ranks.append(max(0.0, min(1.0, rank)))
                return ranks
            
            return None
            
        except (ValueError, IndexError):
            return None
    
    def get_ranked_comments(self, video_id: int, min_rank: float = 0.0) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ"""
        session = get_db_session()
        try:
            comments = session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None),
                Comment.comment_rank >= min_rank
            ).order_by(Comment.comment_rank.desc()).all()
            
            result = []
            for comment in comments:
                result.append({
                    'id': comment.id,
                    'author': comment.author,
                    'text': comment.text,
                    'likes': comment.likes,
                    'rank': comment.comment_rank,
                    'published_at': comment.published_at.isoformat() if comment.published_at else None
                })
            
            return result
            
        finally:
            session.close()
    
    def _rank_all_comments_single_request(self, comments: List[Comment], video_summary: str, session: Session) -> bool:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ Gemini"""
        try:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            prompt = self._create_mega_ranking_prompt(comments, video_summary)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å)
            estimated_tokens = len(prompt.split()) + len(comments) * 3  # –ø—Ä–æ–º–ø—Ç + –æ—Ç–≤–µ—Ç—ã
            print(f"üî¢ –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            mega_config = genai.types.GenerationConfig(
                temperature=0.1,
                max_output_tokens=2000,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                top_p=0.8,
                top_k=40
            )
            
            start_time = time.time()
            
            for attempt in range(self.max_retries):
                try:
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}...")
                    
                    # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã
                    wait_time = self.rate_limiter.wait_if_needed(estimated_tokens)
                    if wait_time > 0:
                        status = self.rate_limiter.get_status()
                        print(f"üìä –õ–∏–º–∏—Ç—ã: {status['rpm_used']}/{status['rpm_limit']} RPM, {status['tpm_used']}/{status['tpm_limit']} TPM")
                    
                    response = self.model.generate_content(
                        prompt,
                        generation_config=mega_config
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    self.rate_limiter.record_request(estimated_tokens)
                    
                    if response and response.text:
                        elapsed = time.time() - start_time
                        print(f"‚ö° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                        
                        ranks = self._extract_mega_ranks_from_response(response.text, len(comments))
                        if ranks and len(ranks) == len(comments):
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–Ω–≥–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
                            successful_ranks = 0
                            for comment, rank in zip(comments, ranks):
                                if rank is not None:
                                    comment.comment_rank = rank
                                    successful_ranks += 1
                                    print(f"üìä ID {comment.id}: {rank:.3f}")
                            
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ: {successful_ranks}/{len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                            return True
                        else:
                            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(ranks) if ranks else 0} —Ä–∞–Ω–≥–æ–≤ –∏–∑ {len(comments)}")
                            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(ranks) if ranks else 0} —Ä–∞–Ω–≥–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å {len(comments)}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if "429" in str(e) or "quota" in str(e).lower():
                        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                        wait_time = 60  # –∂–¥–µ–º –º–∏–Ω—É—Ç—É
                        print(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫...")
                        time.sleep(wait_time)
                    elif attempt < self.max_retries - 1:
                        time.sleep(2)
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _create_mega_ranking_prompt(self, comments: List[Comment], video_summary: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        comments_text = ""
        for i, comment in enumerate(comments, 1):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            comment_preview = comment.text[:500] + "..." if len(comment.text) > 500 else comment.text
            comments_text += f"{i}. {comment_preview}\n"
        
        return f"""Rate the informativeness of ALL these comments relative to the video content on a scale from 0.0 to 1.0.

Video content: {video_summary}

Comments ({len(comments)} total):
{comments_text}

Rating criteria:
- 1.0: Comment adds significant value, complements or clarifies video content
- 0.7-0.9: Comment is relevant and contains useful information  
- 0.4-0.6: Comment is partially related to video topic
- 0.1-0.3: Comment is weakly related to content
- 0.0: Comment is unrelated to video (spam, off-topic, emotions without content)

IMPORTANT: Respond with EXACTLY {len(comments)} ratings separated by commas, one for each comment in order.
Example format: 0.8, 0.3, 0.9, 0.1, 0.7, 0.2, ...

Ratings:"""
    
    def _extract_mega_ranks_from_response(self, response: str, expected_count: int) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –º–µ–≥–∞-–æ—Ç–≤–µ—Ç–∞"""
        try:
            import re
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
            lines = response.strip().split('\n')
            ratings_line = None
            
            for line in lines:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                if ',' in line and re.search(r'[0-1]\.\d+', line):
                    ratings_line = line
                    break
            
            if not ratings_line:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç—ã–º–∏, –∏—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                ratings_line = response
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 0.0 –¥–æ 1.0
            pattern = r'([0-1]\.?\d*)'
            matches = re.findall(pattern, ratings_line)
            
            if len(matches) >= expected_count:
                ranks = []
                for i in range(expected_count):
                    try:
                        rank = float(matches[i])
                        ranks.append(max(0.0, min(1.0, rank)))
                    except (ValueError, IndexError):
                        ranks.append(0.5)  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–Ω–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                return ranks
            else:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(matches)} —Ä–∞–Ω–≥–æ–≤ –∏–∑ {expected_count}")
                return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–≥–∞-—Ä–∞–Ω–≥–æ–≤: {e}")
            return None
    
    def _rank_comments_in_batches(self, comments: List[Comment], video_summary: str, session: Session) -> bool:
        """Fallback: —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–∞–º–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å–∞"""
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        successful_ranks = 0
        total_batches = (len(comments) + self.batch_size - 1) // self.batch_size
        
        for i in range(0, len(comments), self.batch_size):
            batch_num = (i // self.batch_size) + 1
            batch = comments[i:i + self.batch_size]
            
            print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–∞—Ç—á–µ–º
            status = self.rate_limiter.get_status()
            print(f"üìä –õ–∏–º–∏—Ç—ã: {status['rpm_used']}/{status['rpm_limit']} RPM, {status['tpm_used']}/{status['tpm_limit']} TPM, {status['rpd_used']}/{status['rpd_limit']} RPD")
            
            batch_success = self._process_batch(batch, video_summary, session, True)
            successful_ranks += batch_success
            
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if batch_num < total_batches:  # –Ω–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ç—á–∞
                # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                base_delay = 60 / self.rate_limiter.rpm_limit  # ~4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è 15 RPM
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç–∞–º
                if status['rpm_used'] >= self.rate_limiter.rpm_limit * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
                    additional_delay = 10
                    print(f"‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É RPM, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ {additional_delay} —Å–µ–∫")
                    base_delay += additional_delay
                
                print(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {base_delay:.1f} —Å–µ–∫...")
                time.sleep(base_delay)
            
        session.commit()
        print(f"‚úÖ –ë–∞—Ç—á–µ–≤–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_ranks}/{len(comments)}")
        return successful_ranks > 0
    
    def _fallback_rank_all_comments(self, comments: List[Comment], video_summary: str, session: Session) -> bool:
        """Fallback: —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
        
        successful_ranks = 0
        for comment in comments:
            try:
                rank = self._rank_single_comment_fallback(comment.text, video_summary)
                comment.comment_rank = rank
                successful_ranks += 1
                print(f"üìä ID {comment.id}: {rank:.3f} (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID {comment.id}: {e}")
        
        session.commit()
        print(f"‚úÖ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_ranks}/{len(comments)}")
        return successful_ranks > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å Gemini"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python gemini_ranker.py <video_id> [--no-fallback] [--api-key=KEY]")
        return
    
    try:
        video_id = int(sys.argv[1])
        use_fallback = "--no-fallback" not in sys.argv
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        api_key = None
        for arg in sys.argv:
            if arg.startswith("--api-key="):
                api_key = arg.split("=", 1)[1]
                break
        
        ranker = GeminiCommentRanker(api_key=api_key, use_fallback=use_fallback)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ ID: {video_id}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: Google Gemini 2.0 Flash")
        if use_fallback:
            print("üîÑ –†–µ–∂–∏–º: Gemini —Å fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
        else:
            print("üîÑ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ Gemini")
            
        success = ranker.rank_comments_for_video(video_id)
        
        if success:
            print("\nüìä –¢–æ–ø-10 –ø—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
            ranked_comments = ranker.get_ranked_comments(video_id, min_rank=0.5)
            
            for i, comment in enumerate(ranked_comments[:10], 1):
                print(f"\n{i}. –†–∞–Ω–≥: {comment['rank']:.3f}")
                print(f"   –ê–≤—Ç–æ—Ä: {comment['author']}")
                print(f"   –õ–∞–π–∫–∏: {comment['likes']}")
                print(f"   –¢–µ–∫—Å—Ç: {comment['text'][:100]}...")
        
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç video_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 