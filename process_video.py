#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ:
1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary
4. –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
"""

import os
import sys
import time
from comments_downloader import download_comments, save_to_db, extract_video_id, get_transcript, generate_summary
from comment_ranker import CommentRanker
from models import get_db_session, Video, Transcript


def process_video_full_pipeline(video_url: str) -> bool:
    """
    –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
    
    Args:
        video_url: URL YouTube –≤–∏–¥–µ–æ
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
    
    # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    print("\nüì• –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    try:
        session = get_db_session()
        video = session.query(Video).filter_by(youtube_url=video_url).first()
        
        if not video:
            print("–°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
            comments = download_comments(video_url)
            save_to_db(video_url, comments)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç video
            video = session.query(Video).filter_by(youtube_url=video_url).first()
        else:
            print("‚úÖ –í–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return False
    
    # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    print("\nüìù –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        session = get_db_session()
        video = session.query(Video).filter_by(youtube_url=video_url).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        transcript = session.query(Transcript).filter_by(video_id=video.id).first()
        transcript_text = transcript.content if transcript else None
        
        if not transcript_text:
            video_id = extract_video_id(video_url)
            if video_id:
                transcript_text = get_transcript(video_id)
                if transcript_text:
                    new_transcript = Transcript(video_id=video.id, content=transcript_text)
                    session.add(new_transcript)
                    session.commit()
                    print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
                    session.close()
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id")
                session.close()
                return False
        else:
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return False
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary
    print("\nüß† –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary...")
    try:
        session = get_db_session()
        video = session.query(Video).filter_by(youtube_url=video_url).first()
        
        if not video.summary and transcript_text:
            print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary...")
            summary = generate_summary(transcript_text)
            if summary:
                video.summary = summary
                session.commit()
                print("‚úÖ Summary —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å summary")
                session.close()
                return False
        else:
            print("‚úÖ Summary —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        session.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary: {e}")
        return False
    
    # –®–∞–≥ 4: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    print("\nüìä –®–∞–≥ 4: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    try:
        session = get_db_session()
        video = session.query(Video).filter_by(youtube_url=video_url).first()
        session.close()
        
        ranker = CommentRanker()
        success = ranker.rank_comments_for_video(video.id)
        
        if success:
            print("‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            print("\nüèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
            ranked_comments = ranker.get_ranked_comments(video.id, min_rank=0.0)
            
            for i, comment in enumerate(ranked_comments[:5], 1):
                print(f"\n{i}. –†–∞–Ω–≥: {comment['rank']:.3f} | –õ–∞–π–∫–∏: {comment['likes']}")
                print(f"   –ê–≤—Ç–æ—Ä: {comment['author']}")
                print(f"   –¢–µ–∫—Å—Ç: {comment['text'][:150]}...")
                
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        return False
    
    print(f"\nüéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python process_video.py <youtube_url>")
        print("–ü—Ä–∏–º–µ—Ä: python process_video.py 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'")
        return
    
    video_url = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube URL
    if "youtube.com" not in video_url and "youtu.be" not in video_url:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
        return
    
    print("=" * 60)
    print("üé¨ –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–†–ê–ë–û–¢–ö–ò YOUTUBE –í–ò–î–ï–û")
    print("=" * 60)
    
    start_time = time.time()
    success = process_video_full_pipeline(video_url)
    end_time = time.time()
    
    print("\n" + "=" * 60)
    if success:
        print(f"‚úÖ –£–°–ü–ï–•! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.1f} —Å–µ–∫—É–Ω–¥")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê! –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 60)


if __name__ == "__main__":
    main() 