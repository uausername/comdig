#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û COMDIG
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

–í–∫–ª—é—á–∞–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ YouTube
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ LLM
- –ú–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å Gemini 2.0 Flash
- Fallback —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import sys
import os
import time
import json
from urllib.parse import urlparse, parse_qs
from youtube_comment_downloader import YoutubeCommentDownloader
from youtube_transcript_api import YouTubeTranscriptApi
import requests
from models import Video, Comment, get_db_session
from gemini_ranker import GeminiCommentRanker
from comment_ranker import CommentRanker
import re
from multi_key_gemini_ranker import MultiKeyGeminiRanker

class VideoProcessor:
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, gemini_api_key: str = None):
        self.session = get_db_session()
        self.downloader = YoutubeCommentDownloader()
        self.gemini_api_key = gemini_api_key or os.getenv('GEMINI_API_KEY')
        
    def _save_comments_to_json(self, video_id: int, video_url: str, youtube_video_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON —Ñ–∞–π–ª...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            comments = self.session.query(Comment).filter_by(video_id=video_id).all()
            
            comments_data = []
            for comment in comments:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ YouTube
                comment_url = f"https://www.youtube.com/watch?v={youtube_video_id}&lc={comment.comment_id}" if comment.comment_id else None
                
                comment_dict = {
                    "database_id": comment.id,  # ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    "comment_id": comment.comment_id,
                    "video_url": video_url,  # –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                    "comment_url": comment_url,  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ YouTube
                    "author": comment.author,
                    "text": comment.text,
                    "likes": comment.likes,
                    "published_at": comment.published_at.isoformat() if comment.published_at else None,
                    "parent_id": comment.parent_id,
                    "comment_rank": comment.comment_rank
                }
                comments_data.append(comment_dict)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open("comments.json", "w", encoding="utf-8") as f:
                json.dump(comments_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ comments.json")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ JSON: {e}")
    
    def _save_summary_to_json(self, video_id: int, video_url: str, youtube_video_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç summary –≤ JSON —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é summary –≤ JSON —Ñ–∞–π–ª...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            video = self.session.query(Video).filter_by(id=video_id).first()
            if not video:
                print("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            summary_data = {
                "database_video_id": video.id,  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ
                "youtube_video_id": youtube_video_id,
                "video_title": video.title,  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                "video_url": video_url,  # –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                "summary": video.summary,
                "created_at": video.upload_date
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open("summary.json", "w", encoding="utf-8") as f:
                json.dump(summary_data, f, ensure_ascii=False, indent=2)
            
            print("‚úÖ Summary —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ summary.json")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è summary –≤ JSON: {e}")
    
    def process_video(self, video_url: str) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –æ—Ç URL –¥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        
        Args:
            video_url: URL YouTube –≤–∏–¥–µ–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        print("üöÄ" + "="*70)
        print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û")
        print("üèÜ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("="*72)
        
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ URL
            video_id = self._extract_video_id(video_url)
            if not video_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id –∏–∑ URL")
                return False
            
            print(f"üìπ Video ID: {video_id}")
            print(f"üîó URL: {video_url}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
            existing_video = self.session.query(Video).filter_by(video_id=video_id).first()
            if existing_video:
                print(f"‚ö†Ô∏è –í–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (ID: {existing_video.id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                has_transcript = existing_video.transcript is not None
                has_summary = existing_video.summary is not None
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö:")
                print(f"   –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {'‚úÖ' if has_transcript else '‚ùå'}")
                print(f"   Summary: {'‚úÖ' if has_summary else '‚ùå'}")
                
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
                if not has_transcript or not has_summary:
                    print("üîÑ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not has_transcript:
                        print("\nüìù –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–°–ö–†–ò–ü–¢–ê")
                        print("-" * 40)
                        transcript = self._get_transcript(video_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                        if not transcript:
                            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ summary
                            manual_summary = self._ask_user_for_manual_summary(video_id)
                            if not manual_summary:
                                print("\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
                                print("üí° –ü—Ä–∏—á–∏–Ω–∞: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ summary")
                                return False
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary
                            existing_video.transcript = None
                            existing_video.summary = manual_summary
                            print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary –¥–ª–∏–Ω–æ–π {len(manual_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                        else:
                            existing_video.transcript = transcript
                    else:
                        transcript = existing_video.transcript
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                    if not has_summary and existing_video.transcript:
                        print("\nü§ñ –≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø SUMMARY")
                        print("-" * 40)
                        summary = self._generate_summary(existing_video.transcript)
                        existing_video.summary = summary
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    self.session.commit()
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
                # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
                print("\nüöÄ –≠–¢–ê–ü 5: –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
                print("-" * 40)
                ranking_success = self._rank_existing_video(existing_video.id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                print("\nüíæ –≠–¢–ê–ü 6: –°–û–•–†–ê–ù–ï–ù–ò–ï JSON –§–ê–ô–õ–û–í")
                print("-" * 40)
                self._save_comments_to_json(existing_video.id, video_url, video_id)
                self._save_summary_to_json(existing_video.id, video_url, video_id)
                
                print("\nüéâ" + "="*70)
                if ranking_success:
                    print("‚úÖ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                    print("üåü –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
                else:
                    print("‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
                    print("üìä –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
                print("="*72)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
                self._show_results(existing_video.id)
                
                return ranking_success
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            print("\nüì• –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
            print("-" * 40)
            comments_data = self._download_comments(video_id)
            if not comments_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                return False
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            print("\nüìù –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–°–ö–†–ò–ü–¢–ê")
            print("-" * 40)
            transcript = self._get_transcript(video_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if not transcript:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ summary
                manual_summary = self._ask_user_for_manual_summary(video_id)
                if not manual_summary:
                    print("\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
                    print("üí° –ü—Ä–∏—á–∏–Ω–∞: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ summary")
                    return False
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary
                summary = manual_summary
                print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ —Å –ø—É—Å—Ç—ã–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º summary
                print("\nüíæ –≠–¢–ê–ü 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
                print("-" * 40)
                db_video_id = self._save_video_to_db(video_id, video_url, comments_data, None, summary)
                if not db_video_id:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î")
                    return False
            else:
                # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                print("\nü§ñ –≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø SUMMARY")
                print("-" * 40)
                summary = self._generate_summary(transcript)
                
                # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –ë–î
                print("\nüíæ –≠–¢–ê–ü 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
                print("-" * 40)
                db_video_id = self._save_video_to_db(video_id, video_url, comments_data, transcript, summary)
                if not db_video_id:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î")
                    return False
            
            # 7. –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å summary)
            next_step = 4 if not transcript else 5
            print(f"\nüöÄ –≠–¢–ê–ü {next_step}: –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
            print("-" * 40)
            ranking_success = self._rank_comments_mega(db_video_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            next_step += 1
            print(f"\nüíæ –≠–¢–ê–ü {next_step}: –°–û–•–†–ê–ù–ï–ù–ò–ï JSON –§–ê–ô–õ–û–í")
            print("-" * 40)
            self._save_comments_to_json(db_video_id, video_url, video_id)
            self._save_summary_to_json(db_video_id, video_url, video_id)
            
            print("\nüéâ" + "="*70)
            if ranking_success:
                print("‚úÖ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                print("üåü –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            else:
                print("‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
                print("üìä –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
            print("="*72)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._show_results(db_video_id)
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            self.session.close()
    
    def _extract_video_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç video_id –∏–∑ YouTube URL"""
        try:
            parsed_url = urlparse(url)
            if parsed_url.hostname in ['www.youtube.com', 'youtube.com']:
                return parse_qs(parsed_url.query)['v'][0]
            elif parsed_url.hostname == 'youtu.be':
                return parsed_url.path[1:]
            return None
        except:
            return None
    
    def _download_comments(self, video_id: str) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å YouTube"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
            comments = list(self.downloader.get_comments(video_id))
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return comments
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return None
    
    def _get_transcript(self, video_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ"""
        try:
            print(f"üìù –ü–æ–ª—É—á–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
            try:
                transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
                transcript = ' '.join([item['text'] for item in transcript_list])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–±—ã—á–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª–∏–Ω–æ–π {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
                return transcript
            except:
                print("‚ö†Ô∏è –û–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ...")
            
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                
                # –ò—â–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                for transcript in transcript_list:
                    if transcript.is_generated:
                        print(f"ü§ñ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∞ —è–∑—ã–∫–µ: {transcript.language}")
                        transcript_data = transcript.fetch()
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º FetchedTranscriptSnippet
                        transcript_text = ' '.join([item.text for item in transcript_data])
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª–∏–Ω–æ–π {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return transcript_text
                
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                for transcript in transcript_list:
                    print(f"üìù –ò—Å–ø–æ–ª—å–∑—É—é –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∞ —è–∑—ã–∫–µ: {transcript.language}")
                    transcript_data = transcript.fetch()
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º FetchedTranscriptSnippet
                    transcript_text = ' '.join([item.text for item in transcript_data])
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª–∏–Ω–æ–π {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return transcript_text
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            print("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
    
    def _generate_summary(self, transcript: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç summary —á–µ—Ä–µ–∑ Gemini API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if not transcript or not self._is_transcript_valid(transcript):
                print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å summary: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
                
            print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é summary —á–µ—Ä–µ–∑ Gemini API...")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á Gemini, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.gemini_api_key:
                try:
                    import google.generativeai as genai
                    genai.configure(api_key=self.gemini_api_key)
                    model = genai.GenerativeModel('gemini-2.0-flash-exp')
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (summary) —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.
                    
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 20-30 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –Ø–∑—ã–∫: English
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ß–µ—Ç–∫–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
{transcript[:100000]}...

Summary:"""
                    
                    response = model.generate_content(
                        prompt,
                        generation_config=genai.types.GenerationConfig(
                            temperature=0.3,
                            max_output_tokens=200,
                            top_p=0.8
                        )
                    )
                    
                    if response and response.text:
                        summary = response.text.strip()
                        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω summary —á–µ—Ä–µ–∑ Gemini –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return summary
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini API: {e}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback summary...")
            fallback_summary = f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞): {transcript[:300]}..."
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω fallback summary –¥–ª–∏–Ω–æ–π {len(fallback_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return fallback_summary
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary: {e}")
            return None
    
    def _save_video_to_db(self, video_id: str, url: str, comments_data: list, transcript: str, summary: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ë–î"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ
            video = Video(
                video_id=video_id,
                youtube_url=url,
                title=f"Video {video_id}",  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ–ª—É—á–∏–≤ —Ä–µ–∞–ª—å–Ω—ã–π title
                transcript=transcript,
                summary=summary
            )
            
            self.session.add(video)
            self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {video.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            print(f"üí¨ –°–æ—Ö—Ä–∞–Ω—è—é {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            
            saved_count = 0
            skipped_count = 0
            
            for comment_data in comments_data:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    if isinstance(comment_data, dict):
                        comment_id = comment_data.get('cid')  # –ü–æ–ª—É—á–∞–µ–º cid –∫–∞–∫ comment_id
                        author = comment_data.get('author', 'Unknown')
                        text = comment_data.get('text', '')
                        likes = parse_likes_count(comment_data.get('votes', 0))
                        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                        published_at = None
                        if comment_data.get('time'):
                            try:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å time_parsed, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                                if comment_data.get('time_parsed'):
                                    from datetime import datetime
                                    published_at = datetime.fromtimestamp(comment_data['time_parsed'])
                            except:
                                pass
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã
                        comment_id = getattr(comment_data, 'cid', None)
                        author = getattr(comment_data, 'author', 'Unknown')
                        text = getattr(comment_data, 'text', '')
                        likes = parse_likes_count(getattr(comment_data, 'votes', 0))
                        published_at = None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º comment_id
                    if comment_id:
                        existing_comment = self.session.query(Comment).filter_by(comment_id=comment_id).first()
                        if existing_comment:
                            skipped_count += 1
                            continue
                    
                    comment = Comment(
                        comment_id=comment_id,  # –î–æ–±–∞–≤–ª—è–µ–º comment_id
                        video_id=video.id,
                        author=author,
                        text=text,
                        likes=likes,
                        published_at=published_at
                    )
                    self.session.add(comment)
                    saved_count += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
                    skipped_count += 1
                    continue
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {saved_count}")
            if skipped_count > 0:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤/–æ—à–∏–±–æ–∫: {skipped_count}")
            
            self.session.commit()
            print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
            return video.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            self.session.rollback()
            return None
    
    def _rank_comments_mega(self, video_id: int) -> bool:
        """–ú–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –ü—Ä–æ–±—É–µ–º –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π
            try:
                multi_ranker = MultiKeyGeminiRanker()
                if len(multi_ranker.api_keys) > 1:
                    print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ({len(multi_ranker.api_keys)} –∫–ª—é—á–µ–π)")
                    return multi_ranker.rank_comments_for_video(video_id)
            except Exception as e:
                print(f"‚ö†Ô∏è –ú—É–ª—å—Ç–∏–∫–ª—é—á–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è...")
            if self.gemini_api_key:
                from gemini_ranker import GeminiCommentRanker
                ranker = GeminiCommentRanker(api_key=self.gemini_api_key)
                return ranker.rank_comments_for_video(video_id)
            else:
                print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                from comment_ranker import CommentRanker
                ranker = CommentRanker()
                return ranker.rank_comments_for_video(video_id)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _rank_existing_video(self, video_id: int) -> bool:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ"""
        return self._rank_comments_mega(video_id)
    
    def _show_results(self, video_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("\nüìä" + "="*50)
            print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
            print("="*52)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            total_comments = self.session.query(Comment).filter_by(video_id=video_id).count()
            ranked_comments = self.session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None)
            ).count()
            
            print(f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}")
            print(f"üìä –ü—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ: {ranked_comments}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {ranked_comments/total_comments*100:.1f}%")
            
            # –¢–æ–ø-5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            top_comments = self.session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None)
            ).order_by(Comment.comment_rank.desc()).limit(5).all()
            
            if top_comments:
                print(f"\nüèÜ –¢–û–ü-5 –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:")
                print("-" * 40)
                for i, comment in enumerate(top_comments, 1):
                    print(f"\n{i}. –†–∞–Ω–≥: {comment.comment_rank:.3f}")
                    print(f"   –ê–≤—Ç–æ—Ä: {comment.author}")
                    print(f"   –¢–µ–∫—Å—Ç: {comment.text[:60]}...")
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            print(f"\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
            print("-" * 40)
            print(f"# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
            print(f"docker-compose run --rm comments-downloader python -c \"from models import *; [print(f'{{c.comment_rank:.3f}}: {{c.text[:50]}}...') for c in get_db_session().query(Comment).filter_by(video_id={video_id}).filter(Comment.comment_rank.isnot(None)).order_by(Comment.comment_rank.desc()).all()]\"")
            
            print(f"\n# –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:")
            print(f"docker-compose run --rm comments-downloader python final_demo.py --api-key=YOUR_KEY")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def _is_transcript_valid(self, transcript: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–Ω—ã–º (–Ω–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"""
        fallback_messages = [
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            ""
        ]
        return transcript and transcript.strip() not in fallback_messages and len(transcript.strip()) > 50

    def _ask_user_for_manual_summary(self, video_id: str) -> str:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ—Ç–æ–≤ –ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å summary –≤—Ä—É—á–Ω—É—é"""
        print("\n" + "="*70)
        print("‚ö†Ô∏è –¢–†–ê–ù–°–ö–†–ò–ü–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù")
        print("="*70)
        print(f"üìπ –í–∏–¥–µ–æ ID: {video_id}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
        print("ü§ñ –ë–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ:")
        print("   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π summary")
        print("   ‚Ä¢ –†–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
        print("="*70)
        
        while True:
            user_input = input("‚ùì –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å summary –≤–∏–¥–µ–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ? (yes/no): ").strip().lower()
            
            if user_input in ['yes', 'y', '–¥–∞', '–¥']:
                print("\nüìù –í–≤–µ–¥–∏—Ç–µ summary –≤–∏–¥–µ–æ:")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã")
                print("   ‚Ä¢ –î–ª–∏–Ω–∞: 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫")
                print("\nüìù –í–∞—à summary (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–≤–∞–∂–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
                
                lines = []
                while True:
                    line = input()
                    if line == "" and lines:
                        break
                    lines.append(line)
                
                manual_summary = "\n".join(lines).strip()
                
                if manual_summary and len(manual_summary) > 20:
                    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary –¥–ª–∏–Ω–æ–π {len(manual_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return manual_summary
                else:
                    print("‚ùå Summary —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    continue
                    
            elif user_input in ['no', 'n', '–Ω–µ—Ç', '–Ω']:
                print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏")
                return None
            else:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'yes' –∏–ª–∏ 'no'")


def parse_likes_count(likes_str):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ YouTube"""
    if not likes_str or likes_str == '':
        return 0
    
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ
    if isinstance(likes_str, int):
        return likes_str
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    likes_str = str(likes_str).strip()
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if not likes_str:
        return 0
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    likes_str = likes_str.lower().replace(' ', '')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    if '—Ç—ã—Å' in likes_str or 'k' in likes_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "—Ç—ã—Å" –∏–ª–∏ "k"
        match = re.search(r'(\d+(?:[,\.]\d+)?)', likes_str)
        if match:
            number = match.group(1).replace(',', '.')
            return int(float(number) * 1000)
    
    if '–º–ª–Ω' in likes_str or 'm' in likes_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "–º–ª–Ω" –∏–ª–∏ "m"
        match = re.search(r'(\d+(?:[,\.]\d+)?)', likes_str)
        if match:
            number = match.group(1).replace(',', '.')
            return int(float(number) * 1000000)
    
    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    match = re.search(r'(\d+)', likes_str)
    if match:
        return int(match.group(1))
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    return 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üé¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python process_video.py <YOUTUBE_URL> [--api-key=GEMINI_KEY]")
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã:")
        print("  python process_video.py 'https://www.youtube.com/watch?v=VIDEO_ID'")
        print("  python process_video.py 'https://youtu.be/VIDEO_ID' --api-key=YOUR_GEMINI_KEY")
        return
    
    video_url = sys.argv[1]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á
    gemini_api_key = None
    for arg in sys.argv:
        if arg.startswith("--api-key="):
            gemini_api_key = arg.split("=", 1)[1]
            break
    
    if not gemini_api_key:
        gemini_api_key = os.getenv('GEMINI_API_KEY')
    
    if not gemini_api_key:
        print("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        print("üîß –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üí° –î–ª—è –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ: --api-key=YOUR_GEMINI_KEY")
    
    try:
        processor = VideoProcessor(gemini_api_key)
        success = processor.process_video(video_url)
        
        if success:
            print("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 