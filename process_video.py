#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û COMDIG
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

–í–∫–ª—é—á–∞–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ YouTube
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ LLM
- –ú–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å Gemini 2.0 Flash
- Fallback —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import sys
import os
import time
from urllib.parse import urlparse, parse_qs
from youtube_comment_downloader import YoutubeCommentDownloader
from youtube_transcript_api import YouTubeTranscriptApi
import requests
from models import Video, Comment, get_db_session
from gemini_ranker import GeminiCommentRanker
from comment_ranker import CommentRanker

class VideoProcessor:
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, gemini_api_key: str = None):
        self.session = get_db_session()
        self.downloader = YoutubeCommentDownloader()
        self.gemini_api_key = gemini_api_key or os.getenv('GEMINI_API_KEY')
        
    def process_video(self, video_url: str) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –æ—Ç URL –¥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        
        Args:
            video_url: URL YouTube –≤–∏–¥–µ–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        print("üöÄ" + "="*70)
        print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û")
        print("üèÜ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("="*72)
        
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ URL
            video_id = self._extract_video_id(video_url)
            if not video_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id –∏–∑ URL")
                return False
            
            print(f"üìπ Video ID: {video_id}")
            print(f"üîó URL: {video_url}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
            existing_video = self.session.query(Video).filter_by(video_id=video_id).first()
            if existing_video:
                print(f"‚ö†Ô∏è –í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (ID: {existing_video.id})")
                print("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–æ–ª—å–∫–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
                return self._rank_existing_video(existing_video.id)
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            print("\nüì• –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
            print("-" * 40)
            comments_data = self._download_comments(video_id)
            if not comments_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                return False
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            print("\nüìù –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–°–ö–†–ò–ü–¢–ê")
            print("-" * 40)
            transcript = self._get_transcript(video_id)
            if not transcript:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
                return False
            
            # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary
            print("\nü§ñ –≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø SUMMARY")
            print("-" * 40)
            summary = self._generate_summary(transcript)
            if not summary:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å summary")
                return False
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –ë–î
            print("\nüíæ –≠–¢–ê–ü 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
            print("-" * 40)
            db_video_id = self._save_video_to_db(video_id, video_url, comments_data, transcript, summary)
            if not db_video_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î")
                return False
            
            # 7. –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
            print("\nüöÄ –≠–¢–ê–ü 5: –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
            print("-" * 40)
            ranking_success = self._rank_comments_mega(db_video_id)
            
            print("\nüéâ" + "="*70)
            if ranking_success:
                print("‚úÖ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                print("üåü –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            else:
                print("‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
                print("üìä –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
            print("="*72)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._show_results(db_video_id)
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            self.session.close()
    
    def _extract_video_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç video_id –∏–∑ YouTube URL"""
        try:
            parsed_url = urlparse(url)
            if parsed_url.hostname in ['www.youtube.com', 'youtube.com']:
                return parse_qs(parsed_url.query)['v'][0]
            elif parsed_url.hostname == 'youtu.be':
                return parsed_url.path[1:]
            return None
        except:
            return None
    
    def _download_comments(self, video_id: str) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å YouTube"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
            comments = list(self.downloader.get_comments(video_id))
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return comments
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return None
    
    def _get_transcript(self, video_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ"""
        try:
            print(f"üìù –ü–æ–ª—É—á–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
            transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
            transcript = ' '.join([item['text'] for item in transcript_list])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª–∏–Ω–æ–π {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
            return transcript
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return None
    
    def _generate_summary(self, transcript: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç summary —á–µ—Ä–µ–∑ LLM"""
        try:
            print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é summary —á–µ—Ä–µ–∑ LLM...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
            try:
                response = requests.get("http://summarizer-llm:8000/", timeout=5)
            except:
                print("‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é summary")
                return "Summary –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            response = requests.post(
                "http://summarizer-llm:8000/summarize",
                json={"text": transcript},
                timeout=300
            )
            
            if response.status_code == 200:
                result = response.json()
                summary = result.get("summary", "")
                if summary:
                    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω summary –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return summary
            
            print("‚ö†Ô∏è LLM –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å summary, –∏—Å–ø–æ–ª—å–∑—É—é fallback")
            return f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {transcript[:500]}..."
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary: {e}")
            return f"Fallback summary: {transcript[:200]}..."
    
    def _save_video_to_db(self, video_id: str, url: str, comments_data: list, transcript: str, summary: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ë–î"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ
            video = Video(
                video_id=video_id,
                url=url,
                title=f"Video {video_id}",  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ–ª—É—á–∏–≤ —Ä–µ–∞–ª—å–Ω—ã–π title
                transcript=transcript,
                summary=summary
            )
            
            self.session.add(video)
            self.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {video.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            print(f"üí¨ –°–æ—Ö—Ä–∞–Ω—è—é {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            
            for comment_data in comments_data:
                comment = Comment(
                    video_id=video.id,
                    author=comment_data.get('author', 'Unknown'),
                    text=comment_data.get('text', ''),
                    likes=comment_data.get('votes', {}).get('likes', 0),
                    published_at=None  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                )
                self.session.add(comment)
            
            self.session.commit()
            print(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
            return video.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            self.session.rollback()
            return None
    
    def _rank_comments_mega(self, video_id: int) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            if self.gemini_api_key:
                print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ú–ï–ì–ê-–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï —Å Gemini 2.0 Flash...")
                ranker = GeminiCommentRanker(api_key=self.gemini_api_key, use_fallback=True)
            else:
                print("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                print("üîß –ó–∞–ø—É—Å–∫–∞—é FALLBACK —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                ranker = CommentRanker(use_fallback=True)
            
            start_time = time.time()
            success = ranker.rank_comments_for_video(video_id)
            elapsed = time.time() - start_time
            
            if success:
                print(f"‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                return True
            else:
                print(f"‚ö†Ô∏è –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _rank_existing_video(self, video_id: int) -> bool:
        """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ"""
        return self._rank_comments_mega(video_id)
    
    def _show_results(self, video_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            print("\nüìä" + "="*50)
            print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
            print("="*52)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            total_comments = self.session.query(Comment).filter_by(video_id=video_id).count()
            ranked_comments = self.session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None)
            ).count()
            
            print(f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}")
            print(f"üìä –ü—Ä–æ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ: {ranked_comments}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {ranked_comments/total_comments*100:.1f}%")
            
            # –¢–æ–ø-5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            top_comments = self.session.query(Comment).filter(
                Comment.video_id == video_id,
                Comment.comment_rank.isnot(None)
            ).order_by(Comment.comment_rank.desc()).limit(5).all()
            
            if top_comments:
                print(f"\nüèÜ –¢–û–ü-5 –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:")
                print("-" * 40)
                for i, comment in enumerate(top_comments, 1):
                    print(f"\n{i}. –†–∞–Ω–≥: {comment.comment_rank:.3f}")
                    print(f"   –ê–≤—Ç–æ—Ä: {comment.author}")
                    print(f"   –¢–µ–∫—Å—Ç: {comment.text[:60]}...")
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            print(f"\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
            print("-" * 40)
            print(f"# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
            print(f"docker-compose run --rm comments-downloader python -c \"from models import *; [print(f'{{c.comment_rank:.3f}}: {{c.text[:50]}}...') for c in get_db_session().query(Comment).filter_by(video_id={video_id}).filter(Comment.comment_rank.isnot(None)).order_by(Comment.comment_rank.desc()).all()]\"")
            
            print(f"\n# –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:")
            print(f"docker-compose run --rm comments-downloader python final_demo.py --api-key=YOUR_KEY")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üé¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python process_video.py <YOUTUBE_URL> [--api-key=GEMINI_KEY]")
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã:")
        print("  python process_video.py 'https://www.youtube.com/watch?v=VIDEO_ID'")
        print("  python process_video.py 'https://youtu.be/VIDEO_ID' --api-key=YOUR_GEMINI_KEY")
        return
    
    video_url = sys.argv[1]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á
    gemini_api_key = None
    for arg in sys.argv:
        if arg.startswith("--api-key="):
            gemini_api_key = arg.split("=", 1)[1]
            break
    
    if not gemini_api_key:
        gemini_api_key = os.getenv('GEMINI_API_KEY')
    
    if not gemini_api_key:
        print("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        print("üîß –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üí° –î–ª—è –º–µ–≥–∞-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ: --api-key=YOUR_GEMINI_KEY")
    
    try:
        processor = VideoProcessor(gemini_api_key)
        success = processor.process_video(video_url)
        
        if success:
            print("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 