import os
import json
import requests
from youtube_comment_downloader import YoutubeCommentDownloader
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, Video, Comment
from datetime import datetime
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from urllib.parse import urlparse, parse_qs
import time
import re

def get_db_session():
    db_host = os.getenv("DB_HOST", "localhost")
    db_port = os.getenv("DB_PORT", "5432")
    db_name = os.getenv("DB_NAME", "comments")
    db_user = os.getenv("DB_USER", "postgres")
    db_password = os.getenv("DB_PASSWORD", "postgres")
    db_url = f"postgresql+psycopg2://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    engine = create_engine(db_url)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    return Session()

def download_comments(video_url):
    downloader = YoutubeCommentDownloader()
    comments = []
    for i, comment in enumerate(downloader.get_comments_from_url(video_url), 1):
        comments.append(comment)
        if i % 10 == 0:
            print(f"–°–∫–∞—á–∞–Ω–æ {i} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    return comments

def save_comments_json(comments, filename, video_url=None, video_db_id=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    enhanced_comments = []
    
    for comment in comments:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ URL –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        video_id = extract_video_id(video_url) if video_url else None
        comment_url = None
        
        if video_id and comment.get('cid'):
            comment_url = f"https://www.youtube.com/watch?v={video_id}&lc={comment.get('cid')}"
        
        enhanced_comment = {
            "database_id": video_db_id,  # ID –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            "comment_id": comment.get('cid'),  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ cid
            "video_url": video_url,  # –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            "comment_url": comment_url,  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ YouTube
            "text": comment.get('text'),
            "time": comment.get('time'),
            "author": comment.get('author'),
            "channel": comment.get('channel'),
            "votes": comment.get('votes'),
            "replies": comment.get('replies'),
            "photo": comment.get('photo'),
            "heart": comment.get('heart'),
            "reply": comment.get('reply'),
            "time_parsed": comment.get('time_parsed')
        }
        enhanced_comments.append(enhanced_comment)
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(enhanced_comments, f, indent=4, ensure_ascii=False)

def save_to_db(video_url, comments):
    session = get_db_session()
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
    video = session.query(Video).filter_by(youtube_url=video_url).first()
    if not video:
        video = Video(
            youtube_url=video_url,
            title=None,
            channel=None,
            upload_date=None,
            summary=None
        )
        session.add(video)
        session.commit()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for c in comments:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π comment_id
        exists = session.query(Comment).filter_by(comment_id=c.get('cid')).first()
        if exists:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        published_at = None
        if c.get('time'):
            try:
                # updated_at: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                published_at = datetime.strptime(c['time'], '%Y-%m-%dT%H:%M:%SZ')
            except Exception:
                published_at = None
        comment = Comment(
            comment_id=c.get('cid'),
            video_id=video.id,
            author=c.get('author'),
            text=c.get('text'),
            likes=parse_likes_count(c.get('votes')),
            published_at=published_at,
            parent_id=c.get('parent')
        )
        session.add(comment)
    session.commit()
    session.close()

def extract_video_id(video_url):
    parsed = urlparse(video_url)
    if parsed.hostname == 'youtu.be':
        return parsed.path[1:]
    elif parsed.hostname in ('www.youtube.com', 'youtube.com'):
        return parse_qs(parsed.query).get('v', [None])[0]
    return None

def get_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
        return " ".join([entry['text'] for entry in transcript])
    except (TranscriptsDisabled, NoTranscriptFound):
        print("‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None

def ask_user_for_manual_summary(video_id: str) -> str:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ—Ç–æ–≤ –ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å summary –≤—Ä—É—á–Ω—É—é"""
    print("\n" + "="*70)
    print("‚ö†Ô∏è –¢–†–ê–ù–°–ö–†–ò–ü–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù")
    print("="*70)
    print(f"üìπ –í–∏–¥–µ–æ ID: {video_id}")
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
    print("ü§ñ –ë–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ:")
    print("   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π summary")
    print("   ‚Ä¢ –†–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("="*70)
    
    while True:
        user_input = input("‚ùì –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å summary –≤–∏–¥–µ–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ? (yes/no): ").strip().lower()
        
        if user_input in ['yes', 'y', '–¥–∞', '–¥']:
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ summary –≤–∏–¥–µ–æ:")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã")
            print("   ‚Ä¢ –î–ª–∏–Ω–∞: 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫")
            print("\nüìù –í–∞—à summary (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–≤–∞–∂–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
            
            lines = []
            while True:
                line = input()
                if line == "" and lines:
                    break
                lines.append(line)
            
            manual_summary = "\n".join(lines).strip()
            
            if manual_summary and len(manual_summary) > 20:
                print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary –¥–ª–∏–Ω–æ–π {len(manual_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                return manual_summary
            else:
                print("‚ùå Summary —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                continue
                
        elif user_input in ['no', 'n', '–Ω–µ—Ç', '–Ω']:
            print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏")
            return None
        else:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'yes' –∏–ª–∏ 'no'")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary —Å –ø–æ–º–æ—â—å—é HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
def generate_summary(text):
    if not text:
        return None
    
    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini API
    try:
        from google import genai
        from google.genai import types
        import os
        
        gemini_api_key = os.getenv('GEMINI_API_KEY')
        if gemini_api_key:
            print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é summary —á–µ—Ä–µ–∑ Gemini API...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å v1alpha API
            client = genai.Client(
                api_key=gemini_api_key,
                http_options=types.HttpOptions(api_version='v1alpha')
            )
            
            prompt = f"""
            –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
            
            –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ:
            {text[:4000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è API
            
            –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
            """
            
            generation_config = types.GenerateContentConfig(
                temperature=0.3,
                max_output_tokens=200,
                top_p=0.8
            )
            
            response = client.models.generate_content(
                model='gemini-2.0-flash',
                contents=prompt,
                config=generation_config
            )
            
            if response.text:
                summary = response.text.strip()
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω summary —á–µ—Ä–µ–∑ Gemini API –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                return summary
        else:
            print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini API: {e}")
    
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback summary...")
    fallback_summary = f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞): {text[:300]}..."
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω fallback summary –¥–ª–∏–Ω–æ–π {len(fallback_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
    return fallback_summary

def parse_likes_count(likes_str):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ YouTube"""
    if not likes_str or likes_str == '':
        return 0
    
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ
    if isinstance(likes_str, int):
        return likes_str
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    likes_str = str(likes_str).strip()
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if not likes_str:
        return 0
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    likes_str = likes_str.lower().replace(' ', '')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    if '—Ç—ã—Å' in likes_str or 'k' in likes_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "—Ç—ã—Å" –∏–ª–∏ "k"
        match = re.search(r'(\d+(?:[,\.]\d+)?)', likes_str)
        if match:
            number = match.group(1).replace(',', '.')
            return int(float(number) * 1000)
    
    if '–º–ª–Ω' in likes_str or 'm' in likes_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "–º–ª–Ω" –∏–ª–∏ "m"
        match = re.search(r'(\d+(?:[,\.]\d+)?)', likes_str)
        if match:
            number = match.group(1).replace(',', '.')
            return int(float(number) * 1000000)
    
    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    match = re.search(r'(\d+)', likes_str)
    if match:
        return int(match.group(1))
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    return 0

def main():
    video_url = os.environ.get("VIDEO_URL")
    if not video_url:
        video_url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ: ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ
    session = get_db_session()
    video = session.query(Video).filter_by(youtube_url=video_url).first()

    if not video:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–æ–≤–æ–µ
        print(f"–°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è {video_url}...")
        comments = download_comments(video_url)
        save_to_db(video_url, comments) # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç video –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ save_to_db
        video = session.query(Video).filter_by(youtube_url=video_url).first()
        
        # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º video.id
        filename = "comments.json"
        save_comments_json(comments, filename, video_url, video.id if video else None)
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")

    # --- –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ summary (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ) ---
    video_id = extract_video_id(video_url)

    if video_id and video:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        transcript_text = video.transcript

        if not transcript_text:
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è video_id: {video_id}...")
            transcript_text = get_transcript(video_id)
            if transcript_text:
                video.transcript = transcript_text
                session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å—Ä–∞–∑—É
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É.")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç.")
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ summary
                manual_summary = ask_user_for_manual_summary(video_id)
                if not manual_summary:
                    print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    session.close()
                    return  # –ó–∞–≤–µ—Ä—à–∞–µ–º main() –±–µ–∑ –∞–≤–∞—Ä–∏–∏
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary
                video.summary = manual_summary
                session.commit()
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É.")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –≤ —Ñ–∞–π–ª
                video_id_youtube = extract_video_id(video_url)
                summary_data = {
                    "database_video_id": video.id,
                    "youtube_video_id": video_id_youtube,
                    "video_title": video.title,
                    "video_url": video_url,
                    "summary": manual_summary,
                    "created_at": video.upload_date
                }
                with open("summary.json", "w", encoding="utf-8") as f:
                    json.dump(summary_data, f, ensure_ascii=False, indent=2)
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π summary —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ summary.json")
                
                session.close()
                return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ summary –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
        if transcript_text and not video.summary:
            print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏...")
            summary = generate_summary(transcript_text)
            if summary: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ summary –Ω–µ None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                video.summary = summary
                session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary
                print("‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É.")
                print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ summary:")
                print(summary)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –≤ —Ñ–∞–π–ª
                video_id_youtube = extract_video_id(video_url)
                summary_data = {
                    "database_video_id": video.id,  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ
                    "youtube_video_id": video_id_youtube,
                    "video_title": video.title,  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                    "video_url": video_url,  # –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                    "summary": summary,
                    "created_at": video.upload_date
                }
                with open("summary.json", "w", encoding="utf-8") as f:
                    json.dump(summary_data, f, ensure_ascii=False, indent=2)
                    print("Summary —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ summary.json")
            else:
                 print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏.")
        elif video.summary:
             print("‚úÖ –°–∞–º–º–∞—Ä–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
             print("–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ summary:")
             print(video.summary)
             # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π summary –≤ —Ñ–∞–π–ª
             video_id_youtube = extract_video_id(video_url)
             summary_data = {
                 "database_video_id": video.id,  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ
                 "youtube_video_id": video_id_youtube,
                 "video_title": video.title,  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                 "video_url": video_url,  # –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                 "summary": video.summary,
                 "created_at": video.upload_date
             }
             with open("summary.json", "w", encoding="utf-8") as f:
                 json.dump(summary_data, f, ensure_ascii=False, indent=2)
                 print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π summary —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ summary.json")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏ ‚Äî –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id –∏–ª–∏ –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ.")

    session.close()

if __name__ == "__main__":
    main()